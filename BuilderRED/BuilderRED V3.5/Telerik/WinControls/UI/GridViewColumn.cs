// Decompiled with JetBrains decompiler
// Type: Telerik.WinControls.UI.GridViewColumn
// Assembly: BuilderRED, Version=3.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1B998B6-FDC9-4BE9-BF3E-DE300E192916
// Assembly location: C:\Program Files (x86)\ERDC-CERL\SMS BUILDER RED\BuilderRED.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Windows.Forms;
using Telerik.WinControls.Data;
using Telerik.WinControls.Interfaces;
using Telerik.WinControls.Primitives;

namespace Telerik.WinControls.UI
{
  [DesignTimeVisible(false)]
  [ToolboxItem(false)]
  [TypeConverter(typeof (ExpandableObjectConverter))]
  public abstract class GridViewColumn : RadObject, IEditorProvider, INotifyPropertyChangingEx
  {
    public static RadProperty FieldNameProperty = RadProperty.Register(nameof (FieldName), typeof (string), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ""));
    public static RadProperty NameProperty = RadProperty.Register(nameof (Name), typeof (string), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ""));
    public static RadProperty HeaderTextProperty = RadProperty.Register(nameof (HeaderText), typeof (string), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) null));
    public static RadProperty ExpressionProperty = RadProperty.Register(nameof (Expression), typeof (string), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ""));
    public static RadProperty EnableExpressionEditorProperty = RadProperty.Register(nameof (EnableExpressionEditor), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty IsVisibleProperty = RadProperty.Register(nameof (IsVisible), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty IsAutoGeneratedProperty = RadProperty.Register(nameof (IsAutoGenerated), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty VisibleInColumnChooserProperty = RadProperty.Register(nameof (VisibleInColumnChooser), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty PinPositionProperty = RadProperty.Register(nameof (PinPosition), typeof (PinnedColumnPosition), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) PinnedColumnPosition.None));
    public static RadProperty AllowSortProperty = RadProperty.Register(nameof (AllowSort), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty AllowGroupProperty = RadProperty.Register(nameof (AllowGroup), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty ReadOnlyProperty = RadProperty.Register(nameof (ReadOnly), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty AllowResizeProperty = RadProperty.Register(nameof (AllowResize), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty AllowHideProperty = RadProperty.Register(nameof (AllowHide), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty DisableHTMLRenderingProperty = RadProperty.Register(nameof (DisableHTMLRendering), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty WrapTextProperty = RadProperty.Register(nameof (WrapText), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty TextAlignmentProperty = RadProperty.Register(nameof (TextAlignment), typeof (ContentAlignment), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ContentAlignment.MiddleLeft));
    public static RadProperty HeaderTextAlignmentProperty = RadProperty.Register(nameof (HeaderTextAlignment), typeof (ContentAlignment), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ContentAlignment.MiddleCenter));
    public static RadProperty HeaderImageProperty = RadProperty.Register(nameof (HeaderImage), typeof (Image), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) null));
    public static RadProperty ImageLayoutProperty = RadProperty.Register(nameof (ImageLayout), typeof (ImageLayout), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) ImageLayout.None));
    public static RadProperty TextImageRelationProperty = RadProperty.Register(nameof (TextImageRelation), typeof (TextImageRelation), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) TextImageRelation.Overlay));
    public static RadProperty WidthProperty = RadProperty.Register(nameof (Width), typeof (int), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) 50, ElementPropertyOptions.Cancelable));
    public static RadProperty RenderWidthProperty = RadProperty.Register("RenderWidth", typeof (int), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) 50, ElementPropertyOptions.Cancelable));
    public static RadProperty MinWidthProperty = RadProperty.Register(nameof (MinWidth), typeof (int), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) 5));
    public static RadProperty MaxWidthProperty = RadProperty.Register(nameof (MaxWidth), typeof (int), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) 0));
    public static RadProperty RowSpanProperty = RadProperty.Register(nameof (RowSpan), typeof (int), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) 20));
    public static RadProperty StretchVerticallyProperty = RadProperty.Register(nameof (StretchVertically), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty ShowEditorProperty = RadProperty.Register("ShowEditor", typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false));
    public static RadProperty IsCurrentProperty = RadProperty.Register(nameof (IsCurrent), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) false, ElementPropertyOptions.Cancelable));
    public static RadProperty AutoEllipsisProperty = RadProperty.Register(nameof (AutoEllipsis), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty AutoSizeModeProperty = RadProperty.Register(nameof (AutoSizeMode), typeof (BestFitColumnMode), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) BestFitColumnMode.DisplayedCells));
    public static RadProperty AllowReorderProperty = RadProperty.Register(nameof (AllowReorder), typeof (bool), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) true));
    public static RadProperty TagProperty = RadProperty.Register(nameof (Tag), typeof (object), typeof (GridViewColumn), (RadPropertyMetadata) new RadElementPropertyMetadata((object) null));
    private ConditionalFormattingObjectCollection conditionalFormattingObjects = new ConditionalFormattingObjectCollection();
    private RadSortOrder sortOrder = RadSortOrder.None;
    private string fieldNameCache = "";
    private SizeF dpiScale = new SizeF(1f, 1f);
    private Accessor accessor;
    private GridViewTemplate ownerTemplate;
    private bool isFieldNamePath;

    public GridViewColumn()
      : this(string.Empty, string.Empty)
    {
    }

    public GridViewColumn(string fieldName)
      : this(string.Empty, fieldName)
    {
    }

    public GridViewColumn(string name, string fieldName)
    {
      this.accessor = new Accessor(this);
      this.conditionalFormattingObjects.CollectionChanged += new NotifyCollectionChangedEventHandler(this.ConditionalFormattingObjects_CollectionChanged);
      this.Name = name;
      this.FieldName = fieldName;
      if (!string.IsNullOrEmpty(this.Name))
      {
        this.HeaderText = name;
      }
      else
      {
        if (string.IsNullOrEmpty(this.FieldName))
          return;
        this.HeaderText = fieldName;
      }
    }

    protected internal virtual void Initialize()
    {
      if (this.sortOrder != RadSortOrder.None)
        this.SortOrder = this.sortOrder;
      this.MapColumnAccessors();
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DefaultValue(false)]
    public bool IsFieldNamePath
    {
      get
      {
        return this.isFieldNamePath;
      }
    }

    [TypeConverter(typeof (ImageTypeConverter))]
    [Browsable(true)]
    [DefaultValue(null)]
    [Category("Appearance")]
    [Description("Gets or set the Column Header image.")]
    public virtual Image HeaderImage
    {
      get
      {
        return (Image) this.GetValue(GridViewColumn.HeaderImageProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.HeaderImageProperty, (object) value);
      }
    }

    [DefaultValue(ImageLayout.None)]
    [Description("Gets or sets the image layout of the image inside the cells.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Appearance")]
    [Browsable(true)]
    public virtual ImageLayout ImageLayout
    {
      get
      {
        return (ImageLayout) this.GetValue(GridViewColumn.ImageLayoutProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.ImageLayoutProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Category("Appearance")]
    [DefaultValue(TextImageRelation.Overlay)]
    [Description("Gets or sets a value indicating the TextImageRelation.")]
    public TextImageRelation TextImageRelation
    {
      get
      {
        return (TextImageRelation) this.GetValue(GridViewColumn.TextImageRelationProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.TextImageRelationProperty, (object) value);
      }
    }

    [Category("Layout")]
    [Browsable(true)]
    [Description("Gets a value indicating whether the column can be resized.")]
    internal virtual bool CanStretch
    {
      get
      {
        if (!this.AllowResize)
          return false;
        if (this.MaxWidth == this.MinWidth)
          return this.MinWidth == 0;
        return true;
      }
    }

    [Category("Layout")]
    [DefaultValue(50)]
    [Browsable(true)]
    [Description("Gets or sets the width of the column.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public virtual int Width
    {
      get
      {
        return (int) Math.Round((double) (int) this.GetValue(GridViewColumn.WidthProperty) * (double) this.DpiScale.Width);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.WidthProperty, (object) value);
      }
    }

    [Category("Layout")]
    [Description("Gets or sets the minimum width, in pixels, of the column.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [DefaultValue(5)]
    [Browsable(true)]
    public int MinWidth
    {
      get
      {
        return (int) Math.Round((double) (int) this.GetValue(GridViewColumn.MinWidthProperty) * (double) this.DpiScale.Width);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.MinWidthProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Description("Gets or sets the maximal width, in pixels, of the column.")]
    [Category("Layout")]
    [DefaultValue(0)]
    [Browsable(true)]
    public int MaxWidth
    {
      get
      {
        return (int) Math.Round((double) (int) this.GetValue(GridViewColumn.MaxWidthProperty) * (double) this.DpiScale.Width);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.MaxWidthProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [DefaultValue(20)]
    [Description("Gets or sets the row span. Used with ColumnGroupsViewDefinition.")]
    [Browsable(true)]
    [Category("Layout")]
    public int RowSpan
    {
      get
      {
        return (int) this.GetValue(GridViewColumn.RowSpanProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.RowSpanProperty, (object) value);
      }
    }

    [Description("Gets or sets a value indicating whether to stretch the column height vertically. Used with ColumnGroupsViewDefinition.")]
    [DefaultValue(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Layout")]
    [Browsable(true)]
    public bool StretchVertically
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.StretchVerticallyProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.StretchVerticallyProperty, (object) value);
      }
    }

    [Category("Layout")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [DefaultValue(BestFitColumnMode.DisplayedCells)]
    [Description("Gets or sets the mode by which the column automatically adjusts its width after BestFit is executed.")]
    public BestFitColumnMode AutoSizeMode
    {
      get
      {
        return (BestFitColumnMode) this.GetValue(GridViewColumn.AutoSizeModeProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AutoSizeModeProperty, (object) value);
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DefaultValue(null)]
    [Description("Gets or sets the object that contains data about the column.")]
    public object Tag
    {
      get
      {
        return this.GetValue(GridViewColumn.TagProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.TagProperty, value);
      }
    }

    [Description("Gets or sets the name data source property or database column to which the column is bound.")]
    [DefaultValue("")]
    [Browsable(true)]
    [Category("Data")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Editor("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof (UITypeEditor))]
    public string FieldName
    {
      get
      {
        return this.fieldNameCache;
      }
      set
      {
        this.fieldNameCache = value;
        int num = (int) this.SetValue(GridViewColumn.FieldNameProperty, (object) value);
      }
    }

    [Category("Data")]
    [Browsable(true)]
    [DefaultValue("")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Description("Gets or sets the column's unique name in the Columns collection of the owner view template.")]
    public virtual string Name
    {
      get
      {
        return (string) this.GetValue(GridViewColumn.NameProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.NameProperty, (object) value);
      }
    }

    [DefaultValue(typeof (RadSortOrder), "None")]
    [Category("Behavior")]
    [Browsable(true)]
    [NotifyParentProperty(true)]
    [Description("Gets or sets a value indicating the sort order of data in the column.")]
    public RadSortOrder SortOrder
    {
      get
      {
        if (this.ownerTemplate != null)
        {
          int index = this.ownerTemplate.SortDescriptors.IndexOf(this.Name);
          if (index >= 0)
          {
            this.sortOrder = GridViewHelper.GetSortDirection(this.ownerTemplate.SortDescriptors[index].Direction);
            return this.sortOrder;
          }
          this.sortOrder = RadSortOrder.None;
        }
        return this.sortOrder;
      }
      set
      {
        if (this.ownerTemplate == null || this.ownerTemplate.MasterTemplate != null && this.ownerTemplate.MasterTemplate.IsLoading)
        {
          this.sortOrder = value;
        }
        else
        {
          if (!this.Sort(value, true))
            return;
          this.sortOrder = value;
          this.OnNotifyPropertyChanged(nameof (SortOrder));
        }
      }
    }

    [Category("Data")]
    [Editor(typeof (RadExpressionEditorUITypeEditor), typeof (UITypeEditor))]
    [Description("Gets or sets the expression used to calculate the values in this column")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public string Expression
    {
      get
      {
        return (string) this.GetValue(GridViewColumn.ExpressionProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.ExpressionProperty, (object) value);
      }
    }

    [Category("Data")]
    [Description("Gets or sets the value indicating if expression builder menu item will be available to the user.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    public bool EnableExpressionEditor
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.EnableExpressionEditorProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.EnableExpressionEditorProperty, (object) value);
      }
    }

    [Category("Behavior")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Editor("Telerik.WinControls.UI.Design.FormattingObjectCollectionEditor, Telerik.WinControls.UI.Design, Version=2018.3.1016.20, Culture=neutral, PublicKeyToken=5bb2a467cbec794e", typeof (UITypeEditor))]
    [Description("Gets list of BaseConditionalFormattingObject instances that define the currently applied conditional formatting of the data in the column.")]
    [Browsable(true)]
    public virtual ConditionalFormattingObjectCollection ConditionalFormattingObjectList
    {
      get
      {
        return this.conditionalFormattingObjects;
      }
    }

    [Browsable(false)]
    [Description("Gets a value indicating the position of the column in the Columns collection of the OwnerTemplate.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public int Index
    {
      get
      {
        if (this.ownerTemplate != null && this is GridViewDataColumn)
          return this.ownerTemplate.Columns.IndexOf((GridViewDataColumn) this);
        return -1;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Description("Gets the instance of GridViewTemplate which the column belongs to.")]
    public GridViewTemplate OwnerTemplate
    {
      get
      {
        return this.ownerTemplate;
      }
      internal set
      {
        if (value == this.ownerTemplate)
          return;
        this.OnNotifyPropertyChanging(nameof (OwnerTemplate));
        this.ownerTemplate = value;
        this.Initialize();
        this.OnNotifyPropertyChanged(nameof (OwnerTemplate));
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Description("Gets a value indicating whether the column is bound to the data field referred by FieldName.")]
    public virtual bool IsDataBound
    {
      get
      {
        return this.accessor is BoundAccessor;
      }
    }

    [Description("Gets value indicating whether the current column is automatically created when the RadGridView is being bound to a data source.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DefaultValue(false)]
    public bool IsAutoGenerated
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.IsAutoGeneratedProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.IsAutoGeneratedProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [Description("Gets a boolean value indicating whether a sort order of data in the column is currently applied.")]
    public virtual bool IsSorted
    {
      get
      {
        if (this.ownerTemplate != null)
          return this.ownerTemplate.SortDescriptors.Contains(this.Name);
        return false;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Description("Gets a value indicating whether the data in the OwnerTemplate is grouped based on the content of this column.")]
    public virtual bool IsGrouped
    {
      get
      {
        if (this.ownerTemplate != null)
          return this.ownerTemplate.GroupDescriptors.Contains(this.Name, this.ownerTemplate.CaseSensitive);
        return false;
      }
    }

    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Description("Gets or sets a value indicating whether the column will be visible in ColumnChooserElement.")]
    [DefaultValue(true)]
    [Category("Behavior")]
    public virtual bool VisibleInColumnChooser
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.VisibleInColumnChooserProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.VisibleInColumnChooserProperty, (object) value);
      }
    }

    [Description("Gets or sets a value indicating whether the column is visible.")]
    [DefaultValue(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Category("Appearance")]
    public virtual bool IsVisible
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.IsVisibleProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.IsVisibleProperty, (object) value);
      }
    }

    [Description("Gets value indicating whether the column contains the currently selected cell in the OwnerTemplate.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public bool IsCurrent
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.IsCurrentProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.IsCurrentProperty, (object) value);
      }
    }

    [DefaultValue(false)]
    [Description("Gets or sets value indicating whether the current column is pinned and cannot be moved from its location when a user scrolls horizontally.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Behavior")]
    [Browsable(true)]
    public bool IsPinned
    {
      get
      {
        return (PinnedColumnPosition) this.GetValue(GridViewColumn.PinPositionProperty) != PinnedColumnPosition.None;
      }
      set
      {
        if (value)
          this.PinPosition = PinnedColumnPosition.Left;
        else
          this.PinPosition = PinnedColumnPosition.None;
      }
    }

    [DefaultValue(PinnedColumnPosition.None)]
    public PinnedColumnPosition PinPosition
    {
      get
      {
        return (PinnedColumnPosition) this.GetValue(GridViewColumn.PinPositionProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.PinPositionProperty, (object) value);
      }
    }

    [Description("Gets or sets a value indicating whether the user can reorder this column using the mouse.")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Category("Behavior")]
    [DefaultValue(true)]
    public virtual bool AllowReorder
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AllowReorderProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AllowReorderProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Category("Behavior")]
    [DefaultValue(true)]
    [Description("Gets or sets value indicating whether the user can sort data based on the contents of this column.")]
    public virtual bool AllowSort
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AllowSortProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AllowSortProperty, (object) value);
      }
    }

    [Browsable(true)]
    [DefaultValue(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Description("Gets or sets a value indicating whether the user can group data based on the content of this column.")]
    [Category("Behavior")]
    public virtual bool AllowGroup
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AllowGroupProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AllowGroupProperty, (object) value);
      }
    }

    [DefaultValue(false)]
    [Description("Gets or sets a value indicating whether the user can edit the data in the column's cells.")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Behavior")]
    public virtual bool ReadOnly
    {
      get
      {
        if (!string.IsNullOrEmpty(this.Expression))
          return true;
        return (bool) this.GetValue(GridViewColumn.ReadOnlyProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.ReadOnlyProperty, (object) value);
      }
    }

    [DefaultValue(true)]
    [Description("Gets or sets value indicating whether the user can resize the column.")]
    [Category("Behavior")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    public virtual bool AllowResize
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AllowResizeProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AllowResizeProperty, (object) value);
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Behavior")]
    [Browsable(true)]
    [DefaultValue(true)]
    [Description("Gets or sets value indicating whether the user can hide the column.")]
    public virtual bool AllowHide
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AllowHideProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AllowHideProperty, (object) value);
      }
    }

    [Localizable(true)]
    [Browsable(true)]
    [DefaultValue(null)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Description("Gets or sets the caption text on the column's header cell.")]
    [Category("Appearance")]
    public virtual string HeaderText
    {
      get
      {
        return (string) this.GetValue(GridViewColumn.HeaderTextProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.HeaderTextProperty, (object) value);
      }
    }

    [DefaultValue(true)]
    [Category("Appearance")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Description("Disable or Enable HTML-like text rendering in the column.")]
    public bool DisableHTMLRendering
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.DisableHTMLRenderingProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.DisableHTMLRenderingProperty, (object) value);
      }
    }

    [Category("Behavior")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [DefaultValue(false)]
    [Description("Gets or sets value indicating whether the text in each cell in the column should be wrapped.")]
    public bool WrapText
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.WrapTextProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.WrapTextProperty, (object) value);
      }
    }

    [Category("Appearance")]
    [Description("Gets or sets a value which determines whether an ellipsis is shown when the whole text of the cells can not be displayed.")]
    [Browsable(true)]
    [DefaultValue(true)]
    public bool AutoEllipsis
    {
      get
      {
        return (bool) this.GetValue(GridViewColumn.AutoEllipsisProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.AutoEllipsisProperty, (object) value);
      }
    }

    [Description("Gets or sets a value indicating the position of the HeaderText within the header cell.")]
    [DefaultValue(ContentAlignment.MiddleCenter)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Browsable(true)]
    [Category("Appearance")]
    public ContentAlignment HeaderTextAlignment
    {
      get
      {
        return (ContentAlignment) this.GetValue(GridViewColumn.HeaderTextAlignmentProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.HeaderTextAlignmentProperty, (object) value);
      }
    }

    [Description("Gets or sets a value indicating the position of the cell content within a column's cells.")]
    [DefaultValue(ContentAlignment.MiddleLeft)]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [Category("Appearance")]
    public virtual ContentAlignment TextAlignment
    {
      get
      {
        return (ContentAlignment) this.GetValue(GridViewColumn.TextAlignmentProperty);
      }
      set
      {
        int num = (int) this.SetValue(GridViewColumn.TextAlignmentProperty, (object) value);
      }
    }

    protected EventDispatcher EventDispatcher
    {
      get
      {
        if (this.ownerTemplate != null)
          return this.ownerTemplate.EventDispatcher;
        return (EventDispatcher) null;
      }
    }

    internal Accessor Accessor
    {
      get
      {
        return this.accessor;
      }
      set
      {
        if (object.Equals((object) this.accessor, (object) value))
          return;
        if (this.accessor != null)
          this.accessor.Dispose();
        this.accessor = value;
      }
    }

    [Browsable(false)]
    internal virtual bool CanSort
    {
      get
      {
        if (this.ownerTemplate != null && !this.ownerTemplate.EnableSorting)
          return false;
        return this.AllowSort;
      }
    }

    [Browsable(false)]
    internal virtual bool CanGroup
    {
      get
      {
        if (this.ownerTemplate == null)
          return this.AllowGroup;
        if (this.AllowGroup)
          return this.ownerTemplate.EnableGrouping;
        return false;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [Description("Gets value indicating whether a column can be current.")]
    internal virtual bool CanBeCurrent
    {
      get
      {
        return false;
      }
    }

    public SizeF DpiScale
    {
      get
      {
        return this.dpiScale;
      }
      internal set
      {
        this.dpiScale = value;
      }
    }

    public void BestFit()
    {
      if (this.ownerTemplate == null)
        return;
      this.ownerTemplate.BestFitQueue.EnqueueBestFitColumn(this);
      this.ownerTemplate.OnViewChanged((object) this.ownerTemplate, new DataViewChangedEventArgs(ViewChangedAction.BestFitColumn, (object) this));
    }

    public bool Sort(RadSortOrder sortOrder, bool multiSortMode)
    {
      if (!this.CanSort || this.ownerTemplate == null)
        return false;
      SortDescriptor descriptor = new SortDescriptor(this.Name, GridViewHelper.GetSortDirection(sortOrder));
      SortDescriptorCollection sortDescriptors = this.ownerTemplate.SortDescriptors;
      bool flag = !multiSortMode && sortDescriptors.Count > 1;
      if (flag)
      {
        if (sortOrder == RadSortOrder.None)
          descriptor = (SortDescriptor) null;
        if (this.RaiseSortingChanging(descriptor))
          return false;
        sortDescriptors.BeginUpdate();
        sortDescriptors.Clear();
      }
      int index = sortDescriptors.IndexOf(this.Name);
      if (index >= 0)
      {
        if (sortOrder == RadSortOrder.None)
        {
          sortDescriptors.RemoveAt(index);
          return true;
        }
        if (sortOrder == GridViewHelper.GetSortDirection(sortDescriptors[index].Direction))
          return false;
        sortDescriptors[index].Direction = GridViewHelper.GetSortDirection(sortOrder);
        return true;
      }
      if (sortOrder == RadSortOrder.None)
      {
        if (flag)
          sortDescriptors.EndUpdate();
        return false;
      }
      if (!multiSortMode && sortDescriptors.Count == 1)
        sortDescriptors[0] = descriptor;
      else
        sortDescriptors.Add(descriptor);
      if (flag)
        sortDescriptors.EndUpdate();
      return true;
    }

    private bool RaiseSortingChanging(SortDescriptor descriptor)
    {
      if (this.ownerTemplate == null)
        return false;
      GridViewCollectionChangingEventArgs args = new GridViewCollectionChangingEventArgs(this.ownerTemplate, NotifyCollectionChangedAction.Batch, (IList) new List<SortDescriptor>()
      {
        descriptor
      }, (IList) this.ownerTemplate.SortDescriptors, -1, -1, (PropertyChangingEventArgsEx) null);
      this.EventDispatcher.RaiseEvent<GridViewCollectionChangingEventArgs>(EventDispatcher.SortChangingEvent, (object) this.ownerTemplate, args);
      return args.Cancel;
    }

    public virtual string GetDefaultGroupByExpression()
    {
      string str = this.HeaderText;
      if (string.IsNullOrEmpty(str))
        str = this.Name;
      return string.Format("[{0}] as [{1}] {2} [{0}]", (object) this.Name, (object) str, (object) "Group By");
    }

    public bool CanDragToGroup(GridViewTemplate template)
    {
      if (template != null && this.ownerTemplate != template || (!this.IsVisible || !this.CanGroup) || (!this.ownerTemplate.AllowDragToGroup || this.IsGrouped))
        return false;
      return this.ownerTemplate.EnableGrouping;
    }

    public bool CanDragToGroup()
    {
      return this.CanDragToGroup((GridViewTemplate) null);
    }

    public override string ToString()
    {
      return string.Format("{0} ({1})", (object) this.HeaderText, (object) this.GetType().Name);
    }

    public virtual System.Type GetCellType(GridViewRowInfo row)
    {
      return (System.Type) null;
    }

    private void MapColumnAccessors()
    {
      if (this.ownerTemplate == null)
        this.Accessor = new Accessor(this);
      else if (this.ownerTemplate.MasterTemplate != null && this.ownerTemplate.MasterTemplate.VirtualMode)
        this.Accessor = (Accessor) new VirtualAccessor(this);
      else if (!string.IsNullOrEmpty(this.Expression))
        this.Accessor = (Accessor) new ExpressionAccessor(this);
      else if (this.ownerTemplate.IsDataBoundColumn(this))
        this.Accessor = (Accessor) new BoundAccessor(this);
      else
        this.Accessor = new Accessor(this);
    }

    protected virtual int GetDefaultMinWidth()
    {
      return 5;
    }

    protected override bool IsPropertyCancelable(RadPropertyMetadata metadata)
    {
      return true;
    }

    private bool ShouldSerializeMinWidth()
    {
      return this.MinWidth != this.GetDefaultMinWidth();
    }

    private void ResetMinWidth()
    {
      this.MinWidth = this.GetDefaultMinWidth();
    }

    private int GetVisibleColumnsCount(IEnumerable columns)
    {
      int num = 0;
      bool showGroupedColumns = this.OwnerTemplate.ShowGroupedColumns;
      foreach (GridViewColumn column in columns)
      {
        if (column.IsVisible && (!column.IsGrouped || showGroupedColumns))
          ++num;
      }
      return num;
    }

    public virtual IInputEditor GetDefaultEditor()
    {
      return (IInputEditor) null;
    }

    public virtual System.Type GetDefaultEditorType()
    {
      return (System.Type) null;
    }

    public virtual void InitializeEditor(IInputEditor editor)
    {
    }

    protected virtual void DispatchEvent(
      KnownEvents id,
      GridEventType type,
      GridEventDispatchMode dispatchMode,
      object originator,
      object[] arguments)
    {
      if (this.ownerTemplate == null)
        return;
      GridViewEventInfo eventInfo = new GridViewEventInfo(id, type, dispatchMode);
      GridViewSynchronizationService.DispatchEvent(this.ownerTemplate, new GridViewEvent((object) this, originator, arguments, eventInfo), false);
    }

    protected virtual GridEventType GetEventInfo(
      RadProperty property,
      out GridEventDispatchMode dispatchMode)
    {
      dispatchMode = GridEventDispatchMode.Send;
      if (property == GridViewColumn.AllowGroupProperty)
        return GridEventType.Data;
      return property == GridViewColumn.FieldNameProperty || property == GridViewColumn.PinPositionProperty || property == GridViewColumn.ExpressionProperty ? GridEventType.Both : GridEventType.UI;
    }

    public event PropertyChangingEventHandlerEx PropertyChanging;

    protected void OnNotifyPropertyChanging(string propertyName)
    {
      this.OnNotifyPropertyChanging(new PropertyChangingEventArgsEx(propertyName));
    }

    protected virtual void OnNotifyPropertyChanging(PropertyChangingEventArgsEx e)
    {
      PropertyChangingEventHandlerEx propertyChanging = this.PropertyChanging;
      if (propertyChanging == null)
        return;
      propertyChanging((object) this, e);
    }

    protected override void OnPropertyChanging(RadPropertyChangingEventArgs e)
    {
      if (this.ownerTemplate == null)
        return;
      if (e.Property == GridViewColumn.WidthProperty)
      {
        int newValue = (int) e.NewValue;
        int maxWidth = this.MaxWidth;
        int minWidth = this.MinWidth;
        e.Cancel = newValue < minWidth || maxWidth > minWidth && newValue > maxWidth && maxWidth > 0;
        this.OwnerTemplate.BestFitQueue.Dequeue(this);
        if (this.EventDispatcher != null)
        {
          ColumnWidthChangingEventArgs args = new ColumnWidthChangingEventArgs(this.Index, newValue);
          args.Cancel = e.Cancel;
          this.EventDispatcher.RaiseEvent<ColumnWidthChangingEventArgs>(EventDispatcher.ColumnWidthChanging, (object) this, args);
          e.Cancel = args.Cancel;
        }
      }
      else if (e.Property == GridViewColumn.IsCurrentProperty)
      {
        if (this.ownerTemplate.MasterTemplate == null || GridViewSynchronizationService.IsEventSuspended(this.ownerTemplate, KnownEvents.CurrentChanged))
          return;
        if ((bool) e.NewValue)
        {
          if (!this.CanBeCurrent)
          {
            e.Cancel = true;
            return;
          }
          this.ownerTemplate.MasterTemplate.CurrentColumn = this;
          e.Cancel = this.ownerTemplate.MasterTemplate.CurrentColumn != this;
        }
        else
        {
          this.ownerTemplate.MasterTemplate.CurrentColumn = (GridViewColumn) null;
          e.Cancel = this.ownerTemplate.MasterTemplate.CurrentRow != null;
        }
      }
      else if (e.Property == GridViewColumn.IsVisibleProperty)
      {
        bool newValue = (bool) e.NewValue;
        e.Cancel = !newValue && !this.AllowHide && this.GetVisibleColumnsCount((IEnumerable) this.OwnerTemplate.Columns) > 1;
      }
      else if (e.Property == GridViewColumn.NameProperty)
      {
        string newValue = (string) e.NewValue;
        if (this.ownerTemplate.Columns.Contains(newValue) && this != this.ownerTemplate.Columns[newValue])
          throw new InvalidOperationException("A column with the same Name already exists in the collection");
        this.ownerTemplate.Columns.Rename((string) e.OldValue, newValue);
      }
      base.OnPropertyChanging(e);
    }

    protected override void OnPropertyChanged(RadPropertyChangedEventArgs e)
    {
      base.OnPropertyChanged(e);
      if (e.Property == GridViewColumn.MinWidthProperty)
      {
        int minWidth = this.MinWidth;
        if (this.Width < minWidth && minWidth != 0)
          this.Width = (int) Math.Round((double) minWidth / (double) this.DpiScale.Width);
      }
      else if (e.Property == GridViewColumn.MaxWidthProperty)
      {
        int maxWidth = this.MaxWidth;
        if (this.Width > maxWidth && maxWidth != 0)
          this.Width = (int) Math.Round((double) maxWidth / (double) this.DpiScale.Width);
      }
      else if (e.Property == GridViewColumn.FieldNameProperty)
      {
        string newValue = (string) e.NewValue;
        this.fieldNameCache = newValue;
        if (!string.IsNullOrEmpty(newValue) && newValue.Contains("."))
          this.isFieldNamePath = true;
      }
      GridEventDispatchMode dispatchMode = GridEventDispatchMode.Send;
      this.DispatchEvent(KnownEvents.PropertyChanged, this.GetEventInfo(e.Property, out dispatchMode), dispatchMode, (object) this.ownerTemplate, new object[1]
      {
        (object) e
      });
      if (e.Property != GridViewColumn.WidthProperty)
        return;
      if (this.OwnerTemplate != null)
        this.OwnerTemplate.BestFitQueue.Dequeue(this);
      if (this.EventDispatcher == null)
        return;
      ColumnWidthChangedEventArgs args = new ColumnWidthChangedEventArgs(this.Index);
      this.EventDispatcher.RaiseEvent<ColumnWidthChangedEventArgs>(EventDispatcher.ColumnWidthChanged, (object) this, args);
    }

    private void ConditionalFormattingObjects_CollectionChanged(
      object sender,
      NotifyCollectionChangedEventArgs e)
    {
      this.DispatchEvent(KnownEvents.CollectionChanged, GridEventType.UI, GridEventDispatchMode.Send, (object) this.conditionalFormattingObjects, new object[3]
      {
        (object) e.Action,
        (object) e.NewItems,
        (object) e.OldItems
      });
    }

    internal virtual object GetValue(GridViewRowInfo row, GridViewDataOperation type)
    {
      return this.accessor[row];
    }
  }
}
