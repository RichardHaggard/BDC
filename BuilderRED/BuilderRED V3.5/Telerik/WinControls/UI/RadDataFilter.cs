// Decompiled with JetBrains decompiler
// Type: Telerik.WinControls.UI.RadDataFilter
// Assembly: BuilderRED, Version=3.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1B998B6-FDC9-4BE9-BF3E-DE300E192916
// Assembly location: C:\Program Files (x86)\ERDC-CERL\SMS BUILDER RED\BuilderRED.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.IO;
using System.Xml.Serialization;
using Telerik.Licensing;
using Telerik.WinControls.Data;
using Telerik.WinControls.Design;
using Telerik.WinControls.Enumerations;

namespace Telerik.WinControls.UI
{
  [TelerikToolboxCategory("Data Controls")]
  [Designer("Telerik.WinControls.UI.Design.RadDataFilterDesigner, Telerik.WinControls.UI.Design, Version=2018.3.1016.20, Culture=neutral, PublicKeyToken=5bb2a467cbec794e")]
  [ToolboxItem(true)]
  [Description("Displays a hierarchical collection of filter expressions.")]
  [LicenseProvider(typeof (TelerikLicenseProvider))]
  public class RadDataFilter : RadTreeView
  {
    private string expressionDuringInitialize = string.Empty;

    public RadDataFilter()
    {
      if (LicenseManager.UsageMode != LicenseUsageMode.Designtime)
        return;
      LicenseManager.Validate(this.GetType());
    }

    protected override RadTreeViewElement CreateTreeViewElement()
    {
      return (RadTreeViewElement) new RadDataFilterElement();
    }

    protected override Size DefaultSize
    {
      get
      {
        return RadControl.GetDpiScaledSize(new Size(240, 150));
      }
    }

    [DefaultValue(true)]
    public bool AutoGenerateDescriptorItems
    {
      get
      {
        return this.DataFilterElement.AutoGenerateDescriptorItems;
      }
      set
      {
        this.DataFilterElement.AutoGenerateDescriptorItems = value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Description("A collection of descriptor items used to identify the property names and their corresponding types.")]
    [Editor("Telerik.WinControls.UI.Design.DataFilterDescriptorItemCollectionEditor, Telerik.WinControls.UI.Design, Version=2018.3.1016.20, Culture=neutral, PublicKeyToken=5bb2a467cbec794e", typeof (UITypeEditor))]
    public DataFilterItemOwnerCollection Descriptors
    {
      get
      {
        return this.DataFilterElement.Descriptors;
      }
    }

    [AttributeProvider(typeof (IListSource))]
    public override object DataSource
    {
      get
      {
        return this.DataFilterElement.DataSource;
      }
      set
      {
        this.DataFilterElement.DataSource = value;
      }
    }

    public RadDataFilterElement DataFilterElement
    {
      get
      {
        return this.TreeViewElement as RadDataFilterElement;
      }
    }

    [DefaultValue("")]
    public string Expression
    {
      get
      {
        return this.DataFilterElement.Expression;
      }
      set
      {
        if (this.IsInitializing)
          this.expressionDuringInitialize = value;
        else
          this.DataFilterElement.Expression = value;
      }
    }

    [DefaultValue(false)]
    public bool SortFieldNames
    {
      get
      {
        return this.DataFilterElement.SortFieldNames;
      }
      set
      {
        this.DataFilterElement.SortFieldNames = value;
      }
    }

    [DefaultValue(SortStyle.Ascending)]
    public SortStyle FieldNamesSortStyle
    {
      get
      {
        return this.DataFilterElement.FieldNamesSortStyle;
      }
      set
      {
        this.DataFilterElement.FieldNamesSortStyle = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Category("Data")]
    public override RadTreeNodeCollection Nodes
    {
      get
      {
        return base.Nodes;
      }
    }

    [Description("Gets or sets a value indicating whether drag and drop is enabled.")]
    [Category("Behavior")]
    [DefaultValue(true)]
    public override bool AllowDragDrop
    {
      get
      {
        return base.AllowDragDrop;
      }
      set
      {
        base.AllowDragDrop = value;
      }
    }

    [Description("Gets or sets a value indicating whether adding new nodes is allowed.")]
    [Category("Behavior")]
    [DefaultValue(true)]
    public override bool AllowAdd
    {
      get
      {
        return base.AllowAdd;
      }
      set
      {
        base.AllowAdd = value;
      }
    }

    [Description("Gets or sets a value indicating whether removing nodes is allowed.")]
    [Category("Behavior")]
    [DefaultValue(true)]
    public override bool AllowRemove
    {
      get
      {
        return base.AllowRemove;
      }
      set
      {
        base.AllowRemove = value;
      }
    }

    [DefaultValue(true)]
    [Category("Behavior")]
    [Description("Gets or sets a value indicating whether editing is allowed.")]
    public override bool AllowEdit
    {
      get
      {
        return base.AllowEdit;
      }
      set
      {
        base.AllowEdit = value;
      }
    }

    [Description("Gets or sets the height of the item.")]
    [Browsable(false)]
    [Category("CatAppearance")]
    [DefaultValue(30)]
    public override int ItemHeight
    {
      get
      {
        return base.ItemHeight;
      }
      set
      {
        base.ItemHeight = value;
      }
    }

    [Category("Behavior")]
    [Description("TreeViewShowLinesDescr")]
    [DefaultValue(true)]
    public override bool ShowLines
    {
      get
      {
        return base.ShowLines;
      }
      set
      {
        base.ShowLines = value;
      }
    }

    [DefaultValue(typeof (Color), "0xF3F3F4")]
    [Category("Appearance")]
    [Description("TreeViewLineColorDescr")]
    public override Color LineColor
    {
      get
      {
        return base.LineColor;
      }
      set
      {
        base.LineColor = value;
      }
    }

    [Category("Appearance")]
    [DefaultValue(TreeLineStyle.Solid)]
    [Description("Gets or sets the line style.")]
    public override TreeLineStyle LineStyle
    {
      get
      {
        return base.LineStyle;
      }
      set
      {
        base.LineStyle = value;
      }
    }

    [DefaultValue(ToggleMode.None)]
    [Category("Behavior")]
    public override ToggleMode ToggleMode
    {
      get
      {
        return base.ToggleMode;
      }
      set
      {
        base.ToggleMode = value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override IFindStringComparer FindStringComparer
    {
      get
      {
        return base.FindStringComparer;
      }
      set
      {
        base.FindStringComparer = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool KeyboardSearchEnabled
    {
      get
      {
        return base.KeyboardSearchEnabled;
      }
      set
      {
        base.KeyboardSearchEnabled = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override int KeyboardSearchResetInterval
    {
      get
      {
        return base.KeyboardSearchResetInterval;
      }
      set
      {
        base.KeyboardSearchResetInterval = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool TriStateMode
    {
      get
      {
        return base.TriStateMode;
      }
      set
      {
        base.TriStateMode = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override RadTreeViewElement TreeViewElement
    {
      get
      {
        return base.TreeViewElement;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ParentMember
    {
      get
      {
        return base.ParentMember;
      }
      set
      {
        base.ParentMember = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override string ChildMember
    {
      get
      {
        return base.ChildMember;
      }
      set
      {
        base.ChildMember = value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override string CheckedMember
    {
      get
      {
        return base.CheckedMember;
      }
      set
      {
        base.CheckedMember = value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override string ValueMember
    {
      get
      {
        return base.ValueMember;
      }
      set
      {
        base.ValueMember = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override string DisplayMember
    {
      get
      {
        return base.DisplayMember;
      }
      set
      {
        base.DisplayMember = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string DataMember
    {
      get
      {
        return base.DataMember;
      }
      set
      {
        base.DataMember = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override CheckedTreeNodeCollection CheckedNodes
    {
      get
      {
        return base.CheckedNodes;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override SelectedTreeNodeCollection SelectedNodes
    {
      get
      {
        return base.SelectedNodes;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override RadTreeNode SelectedNode
    {
      get
      {
        return base.SelectedNode;
      }
      set
      {
        base.SelectedNode = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string PathSeparator
    {
      get
      {
        return base.PathSeparator;
      }
      set
      {
        base.PathSeparator = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool AllowArbitraryItemHeight
    {
      get
      {
        return base.AllowArbitraryItemHeight;
      }
      set
      {
        base.AllowArbitraryItemHeight = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public override bool HotTracking
    {
      get
      {
        return base.HotTracking;
      }
      set
      {
        base.HotTracking = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool HideSelection
    {
      get
      {
        return base.HideSelection;
      }
      set
      {
        base.HideSelection = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool FullRowSelect
    {
      get
      {
        return base.FullRowSelect;
      }
      set
      {
        base.FullRowSelect = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool AutoCheckChildNodes
    {
      get
      {
        return base.AutoCheckChildNodes;
      }
      set
      {
        base.AutoCheckChildNodes = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool CheckBoxes
    {
      get
      {
        return base.CheckBoxes;
      }
      set
      {
        base.CheckBoxes = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override FilterDescriptorCollection FilterDescriptors
    {
      get
      {
        return base.FilterDescriptors;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override object Filter
    {
      get
      {
        return base.Filter;
      }
      set
      {
        base.Filter = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool MultiSelect
    {
      get
      {
        return base.MultiSelect;
      }
      set
      {
        base.MultiSelect = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ImageKey
    {
      get
      {
        return base.ImageKey;
      }
      set
      {
        base.ImageKey = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override int ImageIndex
    {
      get
      {
        return base.ImageIndex;
      }
      set
      {
        base.ImageIndex = value;
      }
    }

    public void ApplyFilter()
    {
      this.DataFilterElement.ApplyFilter();
    }

    public override void EndInit()
    {
      base.EndInit();
      if (!(this.expressionDuringInitialize != string.Empty))
        return;
      this.Expression = this.expressionDuringInitialize;
      this.expressionDuringInitialize = string.Empty;
    }

    protected override void LoadXMLWithReader(TextReader reader, params Type[] extraTypes)
    {
      ((extraTypes == null || extraTypes.Length == 0 ? (XmlSerializer) new XmlTreeSerializer(typeof (XmlDataFilter)) : (XmlSerializer) new XmlTreeSerializer(typeof (XmlDataFilter), extraTypes)).Deserialize(reader) as XmlDataFilter).Deserialize(this);
    }

    protected override void SaveXMLWithWriter(TextWriter writer, params Type[] extraTypes)
    {
      XmlDataFilter xmlDataFilter = new XmlDataFilter(this);
      (extraTypes == null || extraTypes.Length == 0 ? (XmlSerializer) new XmlTreeSerializer(typeof (XmlDataFilter)) : (XmlSerializer) new XmlTreeSerializer(typeof (XmlDataFilter), extraTypes)).Serialize(writer, (object) xmlDataFilter);
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override void ClearSelection()
    {
      base.ClearSelection();
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override void SelectAll()
    {
      base.SelectAll();
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode[] FindNodes(string text)
    {
      return base.FindNodes(text);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode Find(string text)
    {
      return base.Find(text);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode GetNodeByPath(string path)
    {
      return base.GetNodeByPath(path);
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode GetNodeByPath(string path, string pathSeparator)
    {
      return base.GetNodeByPath(path, pathSeparator);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode AddNodeByPath(string path)
    {
      return base.AddNodeByPath(path);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode AddNodeByPath(string path, string pathSeparator)
    {
      return base.AddNodeByPath(path, pathSeparator);
    }

    public event PropertyDisplayNameNeededEventHandler PropertyDisplayNameNeeded
    {
      add
      {
        this.DataFilterElement.PropertyDisplayNameNeeded += value;
      }
      remove
      {
        this.DataFilterElement.PropertyDisplayNameNeeded -= value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event RadTreeView.RadTreeViewCancelEventHandler NodeCheckedChanging
    {
      add
      {
        this.DataFilterElement.NodeCheckedChanging += value;
      }
      remove
      {
        this.DataFilterElement.NodeCheckedChanging -= value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    public override event TreeNodeCheckedEventHandler NodeCheckedChanged
    {
      add
      {
        this.DataFilterElement.NodeCheckedChanged += value;
      }
      remove
      {
        this.DataFilterElement.NodeCheckedChanged -= value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event RadTreeView.RadTreeViewCancelEventHandler SelectedNodeChanging
    {
      add
      {
        this.DataFilterElement.SelectedNodeChanging += value;
      }
      remove
      {
        this.DataFilterElement.SelectedNodeChanging -= value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event RadTreeView.RadTreeViewEventHandler SelectedNodeChanged
    {
      add
      {
        this.DataFilterElement.SelectedNodeChanged += value;
      }
      remove
      {
        this.DataFilterElement.SelectedNodeChanged -= value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event EventHandler SelectedNodesCleared
    {
      add
      {
        this.DataFilterElement.SelectedNodesCleared += value;
      }
      remove
      {
        this.DataFilterElement.SelectedNodesCleared -= value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override event EventHandler<RadTreeViewEventArgs> SelectedNodesChanged
    {
      add
      {
        this.DataFilterElement.SelectedNodesChanged += value;
      }
      remove
      {
        this.DataFilterElement.SelectedNodesChanged -= value;
      }
    }
  }
}
