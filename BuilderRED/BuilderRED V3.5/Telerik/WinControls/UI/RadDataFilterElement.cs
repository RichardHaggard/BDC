// Decompiled with JetBrains decompiler
// Type: Telerik.WinControls.UI.RadDataFilterElement
// Assembly: BuilderRED, Version=3.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1B998B6-FDC9-4BE9-BF3E-DE300E192916
// Assembly location: C:\Program Files (x86)\ERDC-CERL\SMS BUILDER RED\BuilderRED.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Drawing.Design;
using System.Windows.Forms;
using Telerik.WinControls.Data;
using Telerik.WinControls.Enumerations;
using Telerik.WinControls.Localization;
using Telerik.WinControls.UI.Properties;

namespace Telerik.WinControls.UI
{
  public class RadDataFilterElement : RadTreeViewElement, IDataItemSource
  {
    private bool autoGenerateDescriptorItems = true;
    private DateTimePickerFormat defaultDateEditorFormat = DateTimePickerFormat.Short;
    private string defaultCustomDateEditorFormat = string.Empty;
    private IDataFilterProvider provider;
    private FilterDescriptorCollection filters;
    private DataFilterRootNode rootNode;
    private bool sortFieldNames;
    private SortStyle fieldNamesSortStyle;
    private DataFilterItemOwnerCollection descriptors;
    private bool isSettingExpression;
    private bool suspendNodeRemoving;
    protected internal System.Type currentNodeEditorType;
    private bool shouldApplyExpression;

    public RadDataFilterElement()
    {
      base.EditMode = TreeNodeEditMode.Value;
      this.rootNode = new DataFilterRootNode();
      this.rootNode.Expanded = true;
      this.descriptors = new DataFilterItemOwnerCollection((RadElement) this);
      this.descriptors.ItemTypes = new System.Type[2]
      {
        typeof (DataFilterDescriptorItem),
        typeof (DataFilterComboDescriptorItem)
      };
      this.descriptors.ItemsChanged += new ItemChangedDelegate(this.Descriptors_ItemsChanged);
      this.Comparer = (IComparer<RadTreeNode>) new DataFilterComparer(this);
      this.SortDescriptors.Add(new SortDescriptor());
      this.AllowAdd = true;
      this.AllowRemove = true;
      this.AllowEdit = true;
      this.ItemHeight = 30;
      this.ShowLines = true;
      this.LineStyle = TreeLineStyle.Solid;
      this.ToggleMode = ToggleMode.None;
      if (this.AllowAdd)
      {
        DataFilterAddNode dataFilterAddNode = new DataFilterAddNode();
        this.rootNode.AssociatedAddNode = dataFilterAddNode;
        this.rootNode.Nodes.Add((RadTreeNode) dataFilterAddNode);
      }
      this.Nodes.Add((RadTreeNode) this.rootNode);
      (this.RootNode as DataFilterRootNode).Filters = this.filters;
    }

    protected override void DisposeManagedResources()
    {
      this.descriptors.ItemsChanged -= new ItemChangedDelegate(this.Descriptors_ItemsChanged);
      base.DisposeManagedResources();
    }

    protected override void InitializeFields()
    {
      base.InitializeFields();
      this.filters = new FilterDescriptorCollection();
      this.CollapseImage = (Image) Telerik\u002EWinControls\u002EUI\u002EResources.collapsed;
      this.ExpandImage = (Image) Telerik\u002EWinControls\u002EUI\u002EResources.expanded;
    }

    protected override TreeViewDragDropService CreateDragDropService()
    {
      return (TreeViewDragDropService) new DataFilterDragDropService(this);
    }

    protected override IVirtualizedElementProvider<RadTreeNode> CreateElementProvider()
    {
      return (IVirtualizedElementProvider<RadTreeNode>) new DataFilterElementProvider((RadTreeViewElement) this);
    }

    protected virtual DataFilterCriteriaNode CreateCriteriaNode()
    {
      CreateTreeNodeEventArgs e = new CreateTreeNodeEventArgs();
      e.Node = (RadTreeNode) new DataFilterCriteriaNode();
      this.OnCreateNode(e);
      if (e.Node != null)
        return e.Node as DataFilterCriteriaNode;
      return new DataFilterCriteriaNode();
    }

    protected virtual DataFilterGroupNode CreateGroupNode()
    {
      CreateTreeNodeEventArgs e = new CreateTreeNodeEventArgs();
      e.Node = (RadTreeNode) new DataFilterGroupNode();
      this.OnCreateNode(e);
      if (e.Node != null)
        return e.Node as DataFilterGroupNode;
      return new DataFilterGroupNode();
    }

    protected virtual DataFilterAddNode CreateAddNode()
    {
      CreateTreeNodeEventArgs e = new CreateTreeNodeEventArgs();
      e.Node = (RadTreeNode) new DataFilterAddNode();
      this.OnCreateNode(e);
      if (e.Node != null)
        return e.Node as DataFilterAddNode;
      return new DataFilterAddNode();
    }

    internal DataFilterGroupNode RootNode
    {
      get
      {
        return (DataFilterGroupNode) this.rootNode;
      }
    }

    public IDataFilterProvider Provider
    {
      get
      {
        if (this.provider == null)
          this.provider = DataFilterProviderFactory.CreateProvider((object) null);
        return this.provider;
      }
      set
      {
        this.provider = value;
      }
    }

    [RefreshProperties(RefreshProperties.Repaint)]
    [Category("Data")]
    [AttributeProvider(typeof (IListSource))]
    [DefaultValue(null)]
    public override object DataSource
    {
      get
      {
        return this.Provider.SourceControl;
      }
      set
      {
        if (value == this.Provider.SourceControl)
          return;
        this.ClearAutoGeneratedDescriptors();
        this.Provider = DataFilterProviderFactory.CreateProvider(value);
        this.AddDescriptorsFromProvider();
        this.UpdateNodesFromDescriptors();
      }
    }

    private void ClearAutoGeneratedDescriptors()
    {
      if (!this.AutoGenerateDescriptorItems || this.Descriptors.Count == 0)
        return;
      DataFilterDescriptorItem[] filterDescriptorItemArray = new DataFilterDescriptorItem[this.Descriptors.Count];
      this.Descriptors.CopyTo((RadItem[]) filterDescriptorItemArray, 0);
      if (this.IsAtDesignTime())
      {
        IDesignerHost designerHost = this.GetDesignerHost();
        foreach (DataFilterDescriptorItem filterDescriptorItem in filterDescriptorItemArray)
        {
          if (filterDescriptorItem.IsAutoGenerated)
          {
            this.Descriptors.Remove((RadItem) filterDescriptorItem);
            designerHost.DestroyComponent((IComponent) filterDescriptorItem);
          }
        }
      }
      else
      {
        foreach (DataFilterDescriptorItem filterDescriptorItem in filterDescriptorItemArray)
        {
          if (filterDescriptorItem.IsAutoGenerated)
            this.Descriptors.Remove((RadItem) filterDescriptorItem);
        }
      }
    }

    public virtual string Expression
    {
      get
      {
        return this.GetExpression();
      }
      set
      {
        if (this.Expression == value)
          return;
        value = this.NormalizeValue(value);
        this.ViewElement.SuspendLayout();
        this.ClearChildNodes(this.RootNode);
        this.filters.Expression = value;
        this.NormalizeExpression();
        this.isSettingExpression = true;
        this.BuildTree();
        this.isSettingExpression = false;
        this.ViewElement.ResumeLayout(true, true);
      }
    }

    private string GetExpression()
    {
      return this.GetValidatedDescriptorsCollection().Expression;
    }

    private FilterDescriptorCollection GetValidatedDescriptorsCollection()
    {
      FilterDescriptorCollection descriptorCollection = new FilterDescriptorCollection();
      descriptorCollection.LogicalOperator = this.filters.LogicalOperator;
      foreach (FilterDescriptor filter in (Collection<FilterDescriptor>) this.filters)
      {
        CompositeFilterDescriptor compositeDescriptor1 = filter as CompositeFilterDescriptor;
        if (compositeDescriptor1 != null)
        {
          CompositeFilterDescriptor compositeDescriptor2 = this.ValidateCompositeDescriptor(compositeDescriptor1);
          if (this.IsCompositeFilterDescriptorValid(compositeDescriptor2))
            descriptorCollection.Add((FilterDescriptor) compositeDescriptor2);
        }
        else if (this.IsFilterDescriptorValid(filter))
          descriptorCollection.Add(filter);
      }
      return descriptorCollection;
    }

    private CompositeFilterDescriptor ValidateCompositeDescriptor(
      CompositeFilterDescriptor compositeDescriptor)
    {
      CompositeFilterDescriptor filterDescriptor1 = new CompositeFilterDescriptor();
      filterDescriptor1.LogicalOperator = compositeDescriptor.LogicalOperator;
      foreach (FilterDescriptor filterDescriptor2 in (Collection<FilterDescriptor>) compositeDescriptor.FilterDescriptors)
      {
        CompositeFilterDescriptor compositeDescriptor1 = filterDescriptor2 as CompositeFilterDescriptor;
        if (compositeDescriptor1 != null)
        {
          CompositeFilterDescriptor compositeDescriptor2 = this.ValidateCompositeDescriptor(compositeDescriptor1);
          if (this.IsCompositeFilterDescriptorValid(compositeDescriptor2))
            filterDescriptor1.FilterDescriptors.Add((FilterDescriptor) compositeDescriptor2);
        }
        else if (this.IsFilterDescriptorValid(filterDescriptor2))
          filterDescriptor1.FilterDescriptors.Add(filterDescriptor2);
      }
      return filterDescriptor1;
    }

    private bool IsFilterDescriptorValid(FilterDescriptor descriptor)
    {
      if (descriptor.Operator != FilterOperator.None)
        return !string.IsNullOrEmpty(descriptor.Expression);
      return false;
    }

    private bool IsCompositeFilterDescriptorValid(CompositeFilterDescriptor compositeDescriptor)
    {
      return compositeDescriptor.FilterDescriptors.Count > 0;
    }

    private string NormalizeValue(string expression)
    {
      return new FilterDescriptorCollection() { Expression = expression }.Expression;
    }

    protected virtual void BuildTree()
    {
      foreach (FilterDescriptor filter in (Collection<FilterDescriptor>) this.filters)
        this.AddChildNodes(filter, (RadTreeNode) this.RootNode);
    }

    [Editor("Telerik.WinControls.UI.Design.DataFilterDescriptorItemCollectionEditor, Telerik.WinControls.UI.Design, Version=2018.3.1016.20, Culture=neutral, PublicKeyToken=5bb2a467cbec794e", typeof (UITypeEditor))]
    public DataFilterItemOwnerCollection Descriptors
    {
      get
      {
        return this.descriptors;
      }
    }

    public bool AutoGenerateDescriptorItems
    {
      get
      {
        return this.autoGenerateDescriptorItems;
      }
      set
      {
        this.autoGenerateDescriptorItems = value;
      }
    }

    [DefaultValue(false)]
    public bool SortFieldNames
    {
      get
      {
        return this.sortFieldNames;
      }
      set
      {
        this.sortFieldNames = value;
      }
    }

    [DefaultValue(SortStyle.Ascending)]
    public SortStyle FieldNamesSortStyle
    {
      get
      {
        return this.fieldNamesSortStyle;
      }
      set
      {
        this.fieldNamesSortStyle = value;
      }
    }

    public override bool AllowAdd
    {
      get
      {
        return base.AllowAdd;
      }
      set
      {
        bool allowAdd = this.AllowAdd;
        base.AllowAdd = value;
        if (this.AllowAdd == allowAdd)
          return;
        this.UpdateAddNodes();
      }
    }

    public override bool AllowRemove
    {
      get
      {
        return base.AllowRemove;
      }
      set
      {
        bool allowRemove = this.AllowRemove;
        base.AllowRemove = value;
        if (this.AllowRemove == allowRemove)
          return;
        this.UpdateNodesRemoveButton();
      }
    }

    public override bool AllowDragDrop
    {
      get
      {
        return base.AllowDragDrop;
      }
      set
      {
        bool allowDragDrop = this.AllowDragDrop;
        base.AllowDragDrop = value;
        if (this.AllowDragDrop == allowDragDrop)
          return;
        this.UpdateNodesDragButton();
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override TreeNodeEditMode EditMode
    {
      get
      {
        return base.EditMode;
      }
      set
      {
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public override bool AllowAlternatingRowColor
    {
      get
      {
        return base.AllowAlternatingRowColor;
      }
      set
      {
        base.AllowAlternatingRowColor = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override Color AlternatingRowColor
    {
      get
      {
        return base.AlternatingRowColor;
      }
      set
      {
        base.AlternatingRowColor = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override IFindStringComparer FindStringComparer
    {
      get
      {
        return base.FindStringComparer;
      }
      set
      {
        base.FindStringComparer = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override int KeyboardSearchResetInterval
    {
      get
      {
        return base.KeyboardSearchResetInterval;
      }
      set
      {
        base.KeyboardSearchResetInterval = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool KeyboardSearchEnabled
    {
      get
      {
        return false;
      }
      set
      {
        base.KeyboardSearchEnabled = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool TriStateMode
    {
      get
      {
        return base.TriStateMode;
      }
      set
      {
        base.TriStateMode = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ParentMember
    {
      get
      {
        return base.ParentMember;
      }
      set
      {
        base.ParentMember = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ChildMember
    {
      get
      {
        return base.ChildMember;
      }
      set
      {
        base.ChildMember = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string CheckedMember
    {
      get
      {
        return base.CheckedMember;
      }
      set
      {
        base.CheckedMember = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ValueMember
    {
      get
      {
        return base.ValueMember;
      }
      set
      {
        base.ValueMember = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string DisplayMember
    {
      get
      {
        return base.DisplayMember;
      }
      set
      {
        base.DisplayMember = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string DataMember
    {
      get
      {
        return base.DataMember;
      }
      set
      {
        base.DataMember = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override CheckedTreeNodeCollection CheckedNodes
    {
      get
      {
        return base.CheckedNodes;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override SelectedTreeNodeCollection SelectedNodes
    {
      get
      {
        return base.SelectedNodes;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override RadTreeNode SelectedNode
    {
      get
      {
        return base.SelectedNode;
      }
      set
      {
        base.SelectedNode = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string PathSeparator
    {
      get
      {
        return base.PathSeparator;
      }
      set
      {
        base.PathSeparator = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool AllowArbitraryItemHeight
    {
      get
      {
        return base.AllowArbitraryItemHeight;
      }
      set
      {
        base.AllowArbitraryItemHeight = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool HotTracking
    {
      get
      {
        return base.HotTracking;
      }
      set
      {
        base.HotTracking = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool HideSelection
    {
      get
      {
        return base.HideSelection;
      }
      set
      {
        base.HideSelection = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool FullRowSelect
    {
      get
      {
        return base.FullRowSelect;
      }
      set
      {
        base.FullRowSelect = value;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool AutoCheckChildNodes
    {
      get
      {
        return base.AutoCheckChildNodes;
      }
      set
      {
        base.AutoCheckChildNodes = value;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool CheckBoxes
    {
      get
      {
        return base.CheckBoxes;
      }
      set
      {
        base.CheckBoxes = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override FilterDescriptorCollection FilterDescriptors
    {
      get
      {
        return base.FilterDescriptors;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override Predicate<RadTreeNode> FilterPredicate
    {
      get
      {
        return base.FilterPredicate;
      }
      set
      {
        base.FilterPredicate = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override object Filter
    {
      get
      {
        return base.Filter;
      }
      set
      {
        base.Filter = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override bool MultiSelect
    {
      get
      {
        return base.MultiSelect;
      }
      set
      {
        base.MultiSelect = value;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ImageKey
    {
      get
      {
        return base.ImageKey;
      }
      set
      {
        base.ImageKey = value;
      }
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override int ImageIndex
    {
      get
      {
        return base.ImageIndex;
      }
      set
      {
        base.ImageIndex = value;
      }
    }

    public void ApplyFilter()
    {
      this.Provider.ApplyFilter(this.Expression);
    }

    public void AddChildNodes(FilterDescriptor filter, RadTreeNode node)
    {
      bool flag = node == this.rootNode;
      CompositeFilterDescriptor filterDescriptor = filter as CompositeFilterDescriptor;
      if (filterDescriptor == null)
      {
        DataFilterCriteriaNode criteriaNode = this.CreateCriteriaNode();
        if (flag)
        {
          if (!this.isSettingExpression)
            this.rootNode.Filters.Add(filter);
        }
        else
        {
          DataFilterGroupNode dataFilterGroupNode = node as DataFilterGroupNode;
          if (dataFilterGroupNode != null && !this.isSettingExpression)
            dataFilterGroupNode.CompositeDescriptor.FilterDescriptors.Add(filter);
        }
        if (string.IsNullOrEmpty(filter.PropertyName))
        {
          filter.PropertyName = this.GetDefaultPropertyName();
          filter.Operator = ~FilterOperator.None;
        }
        this.UpdateDescriptor(filter);
        criteriaNode.TreeViewElement = (RadTreeViewElement) this;
        criteriaNode.Descriptor = filter;
        criteriaNode.TreeViewElement = (RadTreeViewElement) null;
        node.Nodes.Add((RadTreeNode) criteriaNode);
      }
      else
      {
        DataFilterGroupNode groupNode = this.CreateGroupNode();
        groupNode.Expanded = true;
        if (flag)
        {
          if (!this.isSettingExpression)
            this.rootNode.Filters.Add((FilterDescriptor) filterDescriptor);
        }
        else
        {
          DataFilterGroupNode dataFilterGroupNode = node as DataFilterGroupNode;
          if (dataFilterGroupNode != null && !this.isSettingExpression)
            dataFilterGroupNode.CompositeDescriptor.FilterDescriptors.Add((FilterDescriptor) filterDescriptor);
        }
        groupNode.CompositeDescriptor = filterDescriptor;
        node.Nodes.Add((RadTreeNode) groupNode);
        if (this.AllowAdd)
        {
          DataFilterAddNode addNode = this.CreateAddNode();
          groupNode.AssociatedAddNode = addNode;
          groupNode.Nodes.Add((RadTreeNode) addNode);
        }
        FilterDescriptor[] array = new FilterDescriptor[filterDescriptor.FilterDescriptors.Count];
        filterDescriptor.FilterDescriptors.CopyTo(array, 0);
        foreach (FilterDescriptor filter1 in array)
          this.AddChildNodes(filter1, (RadTreeNode) groupNode);
      }
    }

    public void AddChildNodes(FilterDescriptor filter, RadTreeNode node, bool updateDescriptors)
    {
      bool settingExpression = this.isSettingExpression;
      this.isSettingExpression = !updateDescriptors;
      this.AddChildNodes(filter, node);
      this.isSettingExpression = settingExpression;
    }

    public void RemoveChildNode(RadTreeNode nodeToRemove)
    {
      if (nodeToRemove.Parent == null)
        return;
      this.RemoveChildNode(nodeToRemove.Parent, nodeToRemove);
    }

    public void RemoveChildNode(RadTreeNode node, RadTreeNode childNode)
    {
      if (!this.PreProcess(node, childNode, (object) "Remove"))
        return;
      DataFilterAddNode dataFilterAddNode = childNode as DataFilterAddNode;
      if (this.AllowAdd && dataFilterAddNode != null && dataFilterAddNode.AssociatedGroupNode == node)
        return;
      this.suspendNodeRemoving = true;
      bool flag = this.rootNode == node;
      DataFilterGroupNode dataFilterGroupNode1 = node as DataFilterGroupNode;
      FilterDescriptor filterDescriptor = (FilterDescriptor) null;
      if (dataFilterGroupNode1 != null)
      {
        DataFilterGroupNode dataFilterGroupNode2 = childNode as DataFilterGroupNode;
        if (dataFilterGroupNode2 != null)
        {
          filterDescriptor = (FilterDescriptor) dataFilterGroupNode2.CompositeDescriptor;
          dataFilterGroupNode2.CompositeDescriptor = (CompositeFilterDescriptor) null;
        }
        DataFilterCriteriaNode filterCriteriaNode = childNode as DataFilterCriteriaNode;
        if (filterCriteriaNode != null)
        {
          filterDescriptor = filterCriteriaNode.Descriptor;
          filterCriteriaNode.Descriptor = (FilterDescriptor) null;
        }
        if (flag)
          this.rootNode.Filters.Remove(filterDescriptor);
        else if (dataFilterGroupNode1.CompositeDescriptor != null)
          dataFilterGroupNode1.CompositeDescriptor.FilterDescriptors.Remove(filterDescriptor);
      }
      node.Nodes.Remove(childNode);
      this.suspendNodeRemoving = false;
    }

    public void ClearChildNodes(DataFilterGroupNode node)
    {
      this.ViewElement.SuspendLayout();
      if (node == this.RootNode)
      {
        foreach (RadTreeNode node1 in (Collection<RadTreeNode>) node.Nodes)
          this.RemoveChildNode((RadTreeNode) node, node1);
        this.filters.Clear();
      }
      else
        this.RemoveChildNode(node.Parent, (RadTreeNode) node);
      this.ViewElement.ResumeLayout(true, true);
    }

    public virtual bool ValidateAddNewNode()
    {
      if (this.Descriptors.Count > 0)
        return true;
      string localizedString1 = LocalizationProvider<DataFilterLocalizationProvider>.CurrentProvider.GetLocalizedString("ErrorAddNodeDialogTitle");
      string localizedString2 = LocalizationProvider<DataFilterLocalizationProvider>.CurrentProvider.GetLocalizedString("ErrorAddNodeDialogText");
      RadMessageBox.SetThemeName(((RadControl) this.ElementTree.Control).ThemeName);
      int num = (int) RadMessageBox.Show((IWin32Window) this.ElementTree.Control, localizedString2, localizedString1, MessageBoxButtons.OK, RadMessageIcon.Error);
      return false;
    }

    protected virtual string GetDefaultPropertyName()
    {
      string str = "DefaultName";
      using (IEnumerator<string> enumerator = this.GetFieldNames().GetEnumerator())
      {
        if (enumerator.MoveNext())
          str = enumerator.Current;
      }
      return str;
    }

    private void UpdateDescriptor(FilterDescriptor descriptor)
    {
      string str = descriptor.Value == null ? "" : descriptor.Value.ToString();
      descriptor.Operator = DataFilterOperatorContext.GetOperator(descriptor.Operator, str);
      descriptor.Value = DataFilterOperatorContext.GetDisplayValue(descriptor.Operator, descriptor.Value);
    }

    public IEnumerable<string> GetFieldNames()
    {
      foreach (DataFilterDescriptorItem descriptor in (RadItemCollection) this.Descriptors)
      {
        if ((object) descriptor.DescriptorType != (object) typeof (IBindingList))
          yield return descriptor.DescriptorName;
      }
    }

    public virtual System.Type GetEditorType(System.Type valueType)
    {
      if (valueType.IsEnum)
        return typeof (TreeViewDropDownListEditor);
      if ((object) valueType == (object) typeof (bool))
        return typeof (DataFilterCheckboxEditor);
      if ((object) valueType == (object) typeof (DateTime) || (object) valueType == (object) typeof (DateTime?))
        return typeof (TreeViewDateTimeEditor);
      if ((object) valueType != null && TelerikHelper.IsNumericType(valueType))
        return typeof (TreeViewSpinEditor);
      if ((object) valueType == (object) typeof (Color))
        return typeof (DataFilterColorPickerEditor);
      return typeof (TreeViewTextBoxEditor);
    }

    public override bool BeginEdit()
    {
      if (!base.BeginEdit())
        return false;
      DataFilterGroupNode selectedNode = this.SelectedNode as DataFilterGroupNode;
      if (selectedNode != null)
        (this.GetElement((RadTreeNode) selectedNode) as DataFilterGroupElement)?.OpenEditor();
      return true;
    }

    public override void EndInit()
    {
      base.EndInit();
      if (this.IsDesignMode)
        return;
      this.shouldApplyExpression = true;
    }

    protected virtual void NormalizeExpression()
    {
      foreach (FilterDescriptor filter in (Collection<FilterDescriptor>) this.filters)
        this.NormalizeChildDescriptor(filter as CompositeFilterDescriptor);
      SortedDictionary<int, List<FilterDescriptor>> sortedDictionary = new SortedDictionary<int, List<FilterDescriptor>>((IComparer<int>) new RadDataFilterElement.ReverseComparer<int>((IComparer<int>) Comparer<int>.Default));
      List<CompositeFilterDescriptor> filterDescriptorList = new List<CompositeFilterDescriptor>();
      foreach (FilterDescriptor filter in (Collection<FilterDescriptor>) this.filters)
      {
        CompositeFilterDescriptor filterDescriptor1 = filter as CompositeFilterDescriptor;
        if (filterDescriptor1 != null && this.filters.LogicalOperator == filterDescriptor1.LogicalOperator)
        {
          filterDescriptorList.Add(filterDescriptor1);
          int key = this.filters.IndexOf((FilterDescriptor) filterDescriptor1);
          foreach (FilterDescriptor filterDescriptor2 in (Collection<FilterDescriptor>) filterDescriptor1.FilterDescriptors)
          {
            if (!sortedDictionary.ContainsKey(key))
              sortedDictionary.Add(key, new List<FilterDescriptor>());
            sortedDictionary[key].Insert(0, filterDescriptor2);
          }
          filterDescriptor1.FilterDescriptors.Clear();
        }
      }
      foreach (KeyValuePair<int, List<FilterDescriptor>> keyValuePair in sortedDictionary)
      {
        foreach (FilterDescriptor filterDescriptor in keyValuePair.Value)
          this.filters.Insert(keyValuePair.Key, filterDescriptor);
      }
      foreach (FilterDescriptor filterDescriptor in filterDescriptorList)
        this.filters.Remove(filterDescriptor);
    }

    protected virtual void NormalizeChildDescriptor(CompositeFilterDescriptor compositeDescriptor)
    {
      if (compositeDescriptor == null)
        return;
      FilterDescriptor[] array = new FilterDescriptor[compositeDescriptor.FilterDescriptors.Count];
      compositeDescriptor.FilterDescriptors.CopyTo(array, 0);
      new FilterDescriptorCollection().AddRange(array);
      foreach (FilterDescriptor filterDescriptor in array)
        this.NormalizeChildDescriptor(filterDescriptor as CompositeFilterDescriptor);
      SortedDictionary<int, List<FilterDescriptor>> sortedDictionary = new SortedDictionary<int, List<FilterDescriptor>>((IComparer<int>) new RadDataFilterElement.ReverseComparer<int>((IComparer<int>) Comparer<int>.Default));
      List<CompositeFilterDescriptor> filterDescriptorList = new List<CompositeFilterDescriptor>();
      foreach (FilterDescriptor filterDescriptor1 in (Collection<FilterDescriptor>) compositeDescriptor.FilterDescriptors)
      {
        CompositeFilterDescriptor filterDescriptor2 = filterDescriptor1 as CompositeFilterDescriptor;
        if (filterDescriptor2 != null && compositeDescriptor.LogicalOperator == filterDescriptor2.LogicalOperator)
        {
          int key = compositeDescriptor.FilterDescriptors.IndexOf((FilterDescriptor) filterDescriptor2);
          foreach (FilterDescriptor filterDescriptor3 in (Collection<FilterDescriptor>) filterDescriptor2.FilterDescriptors)
          {
            if (!sortedDictionary.ContainsKey(key))
              sortedDictionary.Add(key, new List<FilterDescriptor>());
            sortedDictionary[key].Insert(0, filterDescriptor3);
          }
          filterDescriptor2.FilterDescriptors.Clear();
          filterDescriptorList.Add(filterDescriptor2);
        }
      }
      foreach (KeyValuePair<int, List<FilterDescriptor>> keyValuePair in sortedDictionary)
      {
        foreach (FilterDescriptor filterDescriptor in keyValuePair.Value)
          compositeDescriptor.FilterDescriptors.Insert(keyValuePair.Key, filterDescriptor);
      }
      foreach (CompositeFilterDescriptor filterDescriptor in filterDescriptorList)
        compositeDescriptor.FilterDescriptors.Remove((FilterDescriptor) filterDescriptor);
    }

    protected override void OnEditorRequired(object sender, TreeNodeEditorRequiredEventArgs e)
    {
      if ((object) this.currentNodeEditorType != null)
        e.EditorType = this.currentNodeEditorType;
      TreeNodeElement element = this.GetElement(this.SelectedNode);
      DataFilterCriteriaElement filterCriteriaElement = element as DataFilterCriteriaElement;
      if (filterCriteriaElement != null)
      {
        if (filterCriteriaElement.CriteriaNode.DescriptorItem is DataFilterComboDescriptorItem)
          e.EditorType = typeof (TreeViewDropDownListEditor);
        sender = (object) filterCriteriaElement.EditingElement;
      }
      DataFilterGroupElement filterGroupElement = element as DataFilterGroupElement;
      if (filterGroupElement != null)
        sender = (object) filterGroupElement.EditingElement;
      base.OnEditorRequired(sender, e);
    }

    protected override void OnEditing(object sender, TreeNodeEditingEventArgs e)
    {
      if (e.Node is DataFilterAddNode)
      {
        e.Cancel = true;
      }
      else
      {
        TreeNodeElement element = this.GetElement(this.SelectedNode);
        DataFilterCriteriaElement filterCriteriaElement = element as DataFilterCriteriaElement;
        if (filterCriteriaElement != null)
          sender = (object) filterCriteriaElement.EditingElement;
        DataFilterGroupElement filterGroupElement = element as DataFilterGroupElement;
        if (filterGroupElement != null)
          sender = (object) filterGroupElement.EditingElement;
      }
      base.OnEditing(sender, e);
    }

    protected internal virtual object SetupDropDownList(
      DataFilterCriteriaNode criteriaNode,
      TreeViewDropDownListEditor editor)
    {
      if (editor == null)
        return (object) null;
      DataFilterComboDescriptorItem descriptorItem = criteriaNode.DescriptorItem as DataFilterComboDescriptorItem;
      if (descriptorItem == null)
        return (object) null;
      RadDropDownListElement editorElement = editor.EditorElement as RadDropDownListElement;
      editorElement.BindingContext = this.BindingContext;
      editorElement.DisplayMember = descriptorItem.DisplayMember;
      editorElement.ValueMember = descriptorItem.ValueMember;
      editorElement.DataSource = descriptorItem.DataSource;
      editorElement.DropDownStyle = descriptorItem.DropDownStyle;
      editorElement.AutoCompleteMode = descriptorItem.AutoCompleteMode;
      editorElement.SelectedValue = criteriaNode.DescriptorValue;
      return (object) editorElement.SelectedText;
    }

    internal object GetComboboxValue(DataFilterCriteriaNode criteriaNode)
    {
      return (criteriaNode.DescriptorItem as DataFilterComboDescriptorItem)?.GetDisplayMember(criteriaNode.DescriptorValue);
    }

    protected override IInputEditor GetEditor(System.Type editorType)
    {
      IInputEditor editor = base.GetEditor(editorType);
      DataFilterCriteriaNode selectedNode = this.SelectedNode as DataFilterCriteriaNode;
      if (editor != null && selectedNode != null)
        this.InitializeEditor(selectedNode.ValueType, (IValueEditor) editor);
      return editor;
    }

    protected internal virtual void InitializeFieldEditor(
      IInputEditor editor,
      DataFilterCriteriaElement editingElement)
    {
      TreeViewDropDownListEditor dropDownListEditor = editor as TreeViewDropDownListEditor;
      if (dropDownListEditor == null)
        return;
      RadDropDownListElement editorElement = dropDownListEditor.EditorElement as RadDropDownListElement;
      if (editorElement == null)
        return;
      editorElement.SortStyle = !this.SortFieldNames ? SortStyle.None : this.FieldNamesSortStyle;
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      foreach (string fieldName in this.GetFieldNames())
      {
        PropertyDisplayNameNeededEventArgs e = new PropertyDisplayNameNeededEventArgs(fieldName, fieldName);
        this.OnPropertyDisplayNameNeeded((object) this, e);
        dictionary.Add(fieldName, e.DisplayName);
      }
      editorElement.DisplayMember = "Value";
      editorElement.ValueMember = "Key";
      editorElement.DataSource = (object) dictionary;
      editorElement.DropDownStyle = RadDropDownStyle.DropDownList;
      editorElement.AutoCompleteMode = AutoCompleteMode.Suggest;
      editorElement.SelectedValue = (object) editingElement.FieldElement.Text;
      editorElement.BindingContext = this.BindingContext;
      editorElement.NullText = LocalizationProvider<DataFilterLocalizationProvider>.CurrentProvider.GetLocalizedString("FieldNullText");
      editorElement.DropDownWidth = 120;
      string propertyName = editingElement.CriteriaNode.PropertyName;
      foreach (RadListDataItem radListDataItem in editorElement.Items)
      {
        if (radListDataItem.Text == propertyName)
          editingElement.CriteriaNode.EditorValue = (object) radListDataItem.Text;
      }
    }

    protected internal virtual void InitializeOperatorEditor(
      IInputEditor editor,
      DataFilterCriteriaElement editingElement)
    {
      BaseDropDownListEditor dropDownListEditor = editor as BaseDropDownListEditor;
      if (dropDownListEditor == null)
        return;
      RadDropDownListElement editorElement = dropDownListEditor.EditorElement as RadDropDownListElement;
      if (editorElement == null)
        return;
      DataFilterCriteriaNode criteriaNode = editingElement.CriteriaNode;
      System.Type type1 = criteriaNode.ValueType;
      if ((object) type1 == null)
        type1 = typeof (string);
      System.Type type2 = type1;
      int num = TelerikHelper.IsNumericType(type2) || (object) type2 == (object) typeof (DateTime) ? 160 : 120;
      editorElement.DropDownWidth = num;
      editorElement.SortStyle = SortStyle.None;
      IList<DataFilterOperatorContext> operationContext = editingElement.CriteriaNode.DescriptorItem.FilterOperationContext;
      for (int index = 0; index < operationContext.Count; ++index)
      {
        DataFilterOperatorContext filterOperatorContext = operationContext[index];
        editorElement.Items.Add(new RadListDataItem()
        {
          Text = filterOperatorContext.Name,
          Value = (object) filterOperatorContext.Operator
        });
        if (filterOperatorContext.Operator == criteriaNode.FilterOperator)
          criteriaNode.EditorValue = (object) filterOperatorContext.Operator;
      }
    }

    protected internal virtual void InitializeValueEditor(
      IInputEditor editor,
      DataFilterCriteriaElement editingElement)
    {
      DataFilterCriteriaNode criteriaNode = editingElement.CriteriaNode;
      object obj = criteriaNode.DescriptorValue;
      TreeViewDropDownListEditor editor1 = editor as TreeViewDropDownListEditor;
      if (editor1 != null)
        obj = this.SetupDropDownList(criteriaNode, editor1);
      criteriaNode.EditorValue = obj;
      editingElement.ValueElement.Text = string.Empty;
    }

    protected internal virtual DataFilterDescriptorItem GetDescriptorItemByName(
      string name)
    {
      foreach (DataFilterDescriptorItem descriptor in (RadItemCollection) this.Descriptors)
      {
        if (descriptor.DescriptorName == name)
          return descriptor;
      }
      return (DataFilterDescriptorItem) null;
    }

    protected virtual void InitializeEditor(System.Type valueType, IValueEditor editor)
    {
      if ((object) valueType != null && TelerikHelper.IsNumericType(valueType) && editor is BaseSpinEditor)
      {
        this.GetFieldType((this.SelectedNode as DataFilterCriteriaNode).PropertyName);
        this.InitializeSpinEditor(editor as TreeViewSpinEditor, valueType);
      }
      else
      {
        if ((object) valueType != (object) typeof (DateTime) && (object) valueType != (object) typeof (DateTime?) || !(editor is BaseDateTimeEditor))
          return;
        this.InitializeDateTimeEditor(editor as TreeViewDateTimeEditor);
      }
    }

    public virtual System.Type GetFieldType(string propertyName)
    {
      foreach (DataFilterDescriptorItem descriptor in (RadItemCollection) this.Descriptors)
      {
        if (descriptor.DescriptorName == propertyName)
          return descriptor.DescriptorType;
      }
      return typeof (string);
    }

    protected virtual void InitializeSpinEditor(TreeViewSpinEditor spinEditor, System.Type valueType)
    {
      if (spinEditor == null)
        return;
      spinEditor.ValueType = valueType;
      spinEditor.MinValue = new Decimal(-1, -1, -1, true, (byte) 0);
      spinEditor.MaxValue = new Decimal(-1, -1, -1, false, (byte) 0);
      spinEditor.Step = new Decimal(1);
      if ((object) valueType == (object) typeof (double) || (object) valueType == (object) typeof (float) || ((object) valueType == (object) typeof (Decimal) || (object) valueType == (object) typeof (float)))
        spinEditor.DecimalPlaces = 2;
      else
        spinEditor.DecimalPlaces = 0;
      spinEditor.ThousandsSeparator = false;
    }

    protected override void SaveEditorValue(TreeNodeElement nodeElement, object newValue)
    {
      if (object.Equals(newValue, (object) string.Empty))
        newValue = (object) null;
      TreeNodeValidatingEventArgs e1 = new TreeNodeValidatingEventArgs(nodeElement, this.CachedOldValue, newValue);
      this.OnValueValidating(e1);
      if (e1.Cancel)
      {
        this.OnValidationError(EventArgs.Empty);
      }
      else
      {
        newValue = e1.NewValue;
        TreeNodeValueChangingEventArgs e2 = new TreeNodeValueChangingEventArgs(this.SelectedNode, newValue, this.CachedOldValue);
        this.OnValueChanging(e2);
        if (e2.Cancel)
          return;
        this.SuspendProvider();
        this.SelectedNode.SuspendPropertyNotifications();
        (nodeElement as BaseDataFilterNodeElement)?.UpdateDescriptorValue(newValue);
        if (this.SelectedNode.parent != null)
          this.SelectedNode.parent.nodes.Update();
        this.SelectedNode.ResumePropertyNotifications();
        this.OnValueChanged(new TreeNodeValueChangedEventArgs(this.SelectedNode));
        this.ResumeProvider();
      }
    }

    protected override bool EndEditCore(bool commitChanges)
    {
      bool flag = base.EndEditCore(commitChanges);
      this.GetElement(this.SelectedNode)?.InvalidateMeasure(true);
      return flag;
    }

    protected override void EnsureNodeVisibleHorizontal(
      RadTreeNode node,
      TreeNodeElement nodeElement)
    {
      if (this.HScrollBar.Visibility != ElementVisibility.Visible || this.DisableEnsureNodeVisibleHorizontal)
        return;
      BaseDataFilterNodeElement filterNodeElement = nodeElement as BaseDataFilterNodeElement;
      if (filterNodeElement == null)
        return;
      Rectangle empty = Rectangle.Empty;
      DataFilterEditorElement editingElement = filterNodeElement.EditingElement;
      if (filterNodeElement != null && editingElement != null && editingElement.ControlBoundingRectangle.Left > this.ViewElement.ControlBoundingRectangle.Left && editingElement.ControlBoundingRectangle.Right < this.ViewElement.ControlBoundingRectangle.Right || (filterNodeElement != null && editingElement != null && editingElement.ControlBoundingRectangle.Width > this.ViewElement.ControlBoundingRectangle.Width || (filterNodeElement == null || editingElement == null || this.HScrollBar.Value + this.HScrollBar.LargeChange + 1 >= editingElement.ControlBoundingRectangle.Right)))
        return;
      this.SetScrollValue(this.HScrollBar, this.HScrollBar.Value + (node.ActualSize.Width - (this.HScrollBar.Value + this.HScrollBar.LargeChange)));
    }

    protected internal virtual void AddDescriptorsFromProvider()
    {
      if (!this.AutoGenerateDescriptorItems || this.ElementTree != null && this.ElementTree.Control != null && (this.ElementTree.Control as RadControl).IsInitializing)
        return;
      if (this.IsAtDesignTime())
      {
        IDesignerHost designerHost = this.GetDesignerHost();
        foreach (PropertyDescriptor propertyDescriptor in this.Provider.PropertyDescriptors)
        {
          DataFilterDescriptorItem component = designerHost.CreateComponent(typeof (DataFilterDescriptorItem)) as DataFilterDescriptorItem;
          component.DescriptorName = propertyDescriptor.Name;
          component.DescriptorType = propertyDescriptor.PropertyType;
          component.IsAutoGenerated = true;
          this.Descriptors.Add((RadItem) component);
        }
      }
      else
      {
        foreach (PropertyDescriptor propertyDescriptor in this.Provider.PropertyDescriptors)
          this.Descriptors.Add((RadItem) new DataFilterDescriptorItem(propertyDescriptor.Name, propertyDescriptor.PropertyType)
          {
            IsAutoGenerated = true
          });
      }
    }

    private bool IsAtDesignTime()
    {
      return this.ElementTree != null && this.ElementTree.Control != null && this.ElementTree.Control.Site != null;
    }

    private IDesignerHost GetDesignerHost()
    {
      if (this.IsAtDesignTime())
        return this.ElementTree.Control.Site.GetService(typeof (IDesignerHost)) as IDesignerHost;
      return (IDesignerHost) null;
    }

    protected override RadContextMenu InitializeDefaultContextMenu(RadTreeNode node)
    {
      return new RadContextMenu();
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override void ClearSelection()
    {
      base.ClearSelection();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override void SelectAll()
    {
      base.SelectAll();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public override RadTreeNode[] FindNodes(string text)
    {
      return base.FindNodes(text);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override RadTreeNode Find(string text)
    {
      return base.Find(text);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode GetNodeByPath(string path)
    {
      return base.GetNodeByPath(path);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    public override RadTreeNode GetNodeByPath(string path, string pathSeparator)
    {
      return base.GetNodeByPath(path, pathSeparator);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override RadTreeNode AddNodeByPath(string path)
    {
      return base.AddNodeByPath(path);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override RadTreeNode AddNodeByPath(string path, string pathSeparator)
    {
      return base.AddNodeByPath(path, pathSeparator);
    }

    private void Descriptors_ItemsChanged(
      RadItemCollection changed,
      RadItem target,
      ItemsChangeOperation operation)
    {
      if (this.ElementTree != null && this.ElementTree.Control != null && (this.ElementTree.Control as RadControl).IsInitializing)
        return;
      DataFilterDescriptorItem filterDescriptorItem = target as DataFilterDescriptorItem;
      switch (operation)
      {
        case ItemsChangeOperation.Inserted:
          using (RadItemCollection.RadItemEnumerator enumerator = this.Descriptors.GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              DataFilterDescriptorItem current = (DataFilterDescriptorItem) enumerator.Current;
              if (filterDescriptorItem != current && filterDescriptorItem.DescriptorName == current.DescriptorName)
                throw new ArgumentException("Cannot add two DataFilterDescriptorItems with the same DescriptorName!");
            }
            break;
          }
        case ItemsChangeOperation.Removed:
          IEnumerable<RadTreeNode> nodes = this.GetNodes();
          List<DataFilterCriteriaNode> filterCriteriaNodeList = new List<DataFilterCriteriaNode>();
          foreach (RadTreeNode radTreeNode in nodes)
          {
            DataFilterCriteriaNode filterCriteriaNode = radTreeNode as DataFilterCriteriaNode;
            if (filterCriteriaNode != null && filterCriteriaNode.PropertyName == filterDescriptorItem.DescriptorName)
              filterCriteriaNodeList.Add(filterCriteriaNode);
          }
          for (int index = filterCriteriaNodeList.Count - 1; index >= 0; --index)
            this.RemoveChildNode((RadTreeNode) filterCriteriaNodeList[index]);
          break;
        case ItemsChangeOperation.Cleared:
          if (this.IsAtDesignTime())
            break;
          this.ClearChildNodes(this.RootNode);
          break;
      }
    }

    public virtual void UpdateNodesFromDescriptors()
    {
      IEnumerable<RadTreeNode> nodes = this.GetNodes();
      List<DataFilterCriteriaNode> filterCriteriaNodeList = new List<DataFilterCriteriaNode>();
      foreach (RadTreeNode radTreeNode in nodes)
      {
        DataFilterCriteriaNode filterCriteriaNode = radTreeNode as DataFilterCriteriaNode;
        if (filterCriteriaNode != null)
        {
          bool flag = true;
          foreach (DataFilterDescriptorItem descriptor in (RadItemCollection) this.Descriptors)
          {
            if (filterCriteriaNode.PropertyName == descriptor.DescriptorName)
            {
              flag = false;
              break;
            }
          }
          if (flag)
            filterCriteriaNodeList.Add(filterCriteriaNode);
        }
      }
      for (int index = filterCriteriaNodeList.Count - 1; index >= 0; --index)
        this.RemoveChildNode((RadTreeNode) filterCriteriaNodeList[index]);
    }

    private void UpdateAddNodes()
    {
      if (!this.IsInValidState(true))
        return;
      if (this.AllowAdd)
        this.AddAddNodes(this.RootNode);
      else
        this.RemoveAddNodes(this.RootNode);
    }

    private void AddAddNodes(DataFilterGroupNode groupNode)
    {
      if (groupNode.AssociatedAddNode == null)
      {
        DataFilterAddNode dataFilterAddNode = new DataFilterAddNode();
        groupNode.AssociatedAddNode = dataFilterAddNode;
        groupNode.Nodes.Add((RadTreeNode) dataFilterAddNode);
      }
      foreach (RadTreeNode node in (Collection<RadTreeNode>) groupNode.Nodes)
      {
        DataFilterGroupNode groupNode1 = node as DataFilterGroupNode;
        if (groupNode1 != null)
          this.AddAddNodes(groupNode1);
      }
    }

    private void RemoveAddNodes(DataFilterGroupNode groupNode)
    {
      if (groupNode.AssociatedAddNode != null)
      {
        groupNode.Nodes.Remove((RadTreeNode) groupNode.AssociatedAddNode);
        groupNode.AssociatedAddNode = (DataFilterAddNode) null;
      }
      foreach (RadTreeNode node in (Collection<RadTreeNode>) groupNode.Nodes)
      {
        DataFilterGroupNode groupNode1 = node as DataFilterGroupNode;
        if (groupNode1 != null)
          this.RemoveAddNodes(groupNode1);
      }
    }

    private void UpdateNodesRemoveButton()
    {
      if (!this.IsInValidState(true))
        return;
      this.SynchronizeNodeElements();
    }

    private void UpdateNodesDragButton()
    {
      if (!this.IsInValidState(true))
        return;
      this.SynchronizeNodeElements();
    }

    public DateTimePickerFormat DefaultDateEditorFormat
    {
      get
      {
        return this.defaultDateEditorFormat;
      }
      set
      {
        this.defaultDateEditorFormat = value;
      }
    }

    public string DefaultCustomDateEditorFormat
    {
      get
      {
        return this.defaultCustomDateEditorFormat;
      }
      set
      {
        this.defaultCustomDateEditorFormat = value;
      }
    }

    private void InitializeDateTimeEditor(TreeViewDateTimeEditor dateTimeEditor)
    {
      if (dateTimeEditor == null || dateTimeEditor == null)
        return;
      RadDateTimePickerElement editorElement = (RadDateTimePickerElement) dateTimeEditor.EditorElement;
      editorElement.Format = this.DefaultDateEditorFormat;
      editorElement.CustomFormat = this.DefaultCustomDateEditorFormat;
    }

    protected override void OnNodeRemoving(RadTreeViewCancelEventArgs e)
    {
      if (this.suspendNodeRemoving)
      {
        this.suspendNodeRemoving = false;
      }
      else
      {
        if (e.Node == this.RootNode)
          e.Cancel = true;
        base.OnNodeRemoving(e);
      }
    }

    protected override void OnLoaded()
    {
      base.OnLoaded();
      this.AllowDragDrop = true;
      this.UpdateAddNodes();
      this.UpdateNodesRemoveButton();
      if (!this.shouldApplyExpression || this.Provider.SourceControl == null)
        return;
      this.Provider.UpdateBoundProperties();
      this.ApplyFilter();
    }

    protected internal override void OnDragEnded(RadTreeViewDragEventArgs e)
    {
      base.OnDragEnded(e);
      if (e.Node.Parent == null)
        return;
      DataFilterGroupNode parent = e.Node.Parent as DataFilterGroupNode;
      if (parent == null)
        return;
      DataFilterCriteriaNode node1 = e.Node as DataFilterCriteriaNode;
      if (node1 != null)
        parent.AddChildDescriptor(node1.Descriptor);
      DataFilterGroupNode node2 = e.Node as DataFilterGroupNode;
      if (node2 == null)
        return;
      parent.AddChildDescriptor((FilterDescriptor) node2.CompositeDescriptor);
    }

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event TreeNodeCheckedEventHandler NodeCheckedChanged;

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    protected override void OnNodeCheckedChanged(TreeNodeCheckedEventArgs e)
    {
      TreeNodeCheckedEventHandler nodeCheckedChanged = this.NodeCheckedChanged;
      if (nodeCheckedChanged == null)
        return;
      nodeCheckedChanged((object) this, e);
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    public override event RadTreeView.RadTreeViewCancelEventHandler NodeCheckedChanging;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    protected override void OnNodeCheckedChanging(RadTreeViewCancelEventArgs e)
    {
      RadTreeView.RadTreeViewCancelEventHandler nodeCheckedChanging = this.NodeCheckedChanging;
      if (nodeCheckedChanging == null)
        return;
      nodeCheckedChanging((object) this, e);
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override event EventHandler<RadTreeViewEventArgs> SelectedNodesChanged;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    protected internal override void OnSelectedNodesChanged(RadTreeNode node)
    {
      if (this.SelectedNodesChanged == null)
        return;
      this.SelectedNodesChanged((object) this, new RadTreeViewEventArgs(node));
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    public override event EventHandler SelectedNodesCleared;

    [Browsable(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    protected internal override void OnSelectedNodesCleared()
    {
      if (this.SelectedNodesCleared == null)
        return;
      this.SelectedNodesCleared((object) this, EventArgs.Empty);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event RadTreeView.RadTreeViewEventHandler SelectedNodeChanged;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    protected internal override void OnSelectedNodeChanged(RadTreeViewEventArgs args)
    {
      RadTreeView.RadTreeViewEventHandler selectedNodeChanged = this.SelectedNodeChanged;
      if (selectedNodeChanged == null)
        return;
      selectedNodeChanged((object) this, args);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override event RadTreeView.RadTreeViewCancelEventHandler SelectedNodeChanging;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Browsable(false)]
    protected internal override void OnSelectedNodeChanging(RadTreeViewCancelEventArgs args)
    {
      if (this.IsEditing)
        this.EndEdit();
      RadTreeView.RadTreeViewCancelEventHandler selectedNodeChanging = this.SelectedNodeChanging;
      if (selectedNodeChanging == null)
        return;
      selectedNodeChanging((object) this, args);
    }

    public event PropertyDisplayNameNeededEventHandler PropertyDisplayNameNeeded;

    protected internal virtual void OnPropertyDisplayNameNeeded(
      object sender,
      PropertyDisplayNameNeededEventArgs e)
    {
      if (this.PropertyDisplayNameNeeded == null)
        return;
      this.PropertyDisplayNameNeeded(sender, e);
    }

    private class ReverseComparer<T> : IComparer<T>
    {
      private readonly IComparer<T> original;

      public ReverseComparer(IComparer<T> original)
      {
        this.original = original;
      }

      public int Compare(T left, T right)
      {
        return this.original.Compare(right, left);
      }
    }
  }
}
