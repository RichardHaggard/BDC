<UserControl 
    x:Class="BDC_V1.Views.InspectionView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:prism="http://prismlibrary.com/"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    prism:ViewModelLocator.AutoWireViewModel="True"
    xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
    xmlns:utils="clr-namespace:BDC_V1.Utils"
    xmlns:converters="clr-namespace:BDC_V1.Converters"
    xmlns:classes="clr-namespace:BDC_V1.Classes"
    xmlns:local="clr-namespace:BDC_V1.Enumerations"
    mc:Ignorable="d"
    d:DesignHeight="640" d:DesignWidth="850">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ViewActivated}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <UserControl.Resources>
      <converters:EnumBooleanConverter       x:Key="EnumBooleanConverter"       />
      <converters:RatingColorToColorConverter x:Key="RatingColorToColorConverter" />
      
      <Brush x:Key="ButtonGridNotEnabledBackground">#DDEBF7</Brush>
      <Brush x:Key="ButtonGridEnabledBackground"   >White  </Brush>
      <Brush x:Key="ButtonGridCheckedForeground"   >Black  </Brush>

        <!-- Insure consistent colors thru out program -->
        <SolidColorBrush x:Key="GreenButtonBrush"
                     Color="{Binding Source={x:Static local:EnumRatingColors.Green}, 
                        Converter={StaticResource RatingColorToColorConverter}, 
                        Mode=OneTime}" />

        <SolidColorBrush x:Key="GreenButtonForeground" Color="DarkGreen" />

        <SolidColorBrush x:Key="RedButtonBrush" 
                     Color="{Binding Source={x:Static local:EnumRatingColors.Red}, 
                        Converter={StaticResource RatingColorToColorConverter}, 
                        Mode=OneTime}" />

        <SolidColorBrush x:Key="AmberButtonBrush" 
                     Color="{Binding Source={x:Static local:EnumRatingColors.Amber}, 
                        Converter={StaticResource RatingColorToColorConverter}, 
                        Mode=OneTime}" />

        <SolidColorBrush x:Key="AmberButtonForeground" Color="#700e01" />

        <SolidColorBrush x:Key="YellowButtonBrush" 
                     Color="{Binding Source={x:Static local:EnumRatingColors.Yellow}, 
                        Converter={StaticResource RatingColorToColorConverter}, 
                        Mode=OneTime}" />

        <!-- Default to the Any Other State -->
        <Style x:Key="ToggleButtonBase" TargetType="RadioButton"
           BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="Foreground"  Value="White" />
            <Setter Property="Background"  Value="#5B9BD5" />
            <Setter Property="FontSize"    Value="16" />
            <Setter Property="FontWeight"  Value="Bold" />
            <Setter Property="Margin"      Value="5" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="2"
                    CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center"                  
                                VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>

                <!-- Trigger on Disabled State -->
                <DataTrigger Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}">
                    <Setter Property="Background"  Value="LightGray" />
                    <Setter Property="Foreground"  Value="DarkGray" />
                    <Setter Property="BorderBrush" Value="DarkGray" />
                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonGreen" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonBase}">
            <Style.Triggers>

                <!-- Trigger on is checked state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource GreenButtonBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ButtonGridCheckedForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonGreenDirect" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonGreen}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.DirectCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource GreenButtonForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonGreenPainted" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonGreen}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.PaintedCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource GreenButtonForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonAmber" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonBase}">
            <Style.Triggers>

                <!-- Trigger on is checked state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource AmberButtonBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ButtonGridCheckedForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonAmberDirect" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonAmber}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.DirectCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource AmberButtonForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonAmberPainted" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonAmber}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.PaintedCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource AmberButtonForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonRed" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonBase}">
            <Style.Triggers>

                <!-- Trigger on is checked state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource RedButtonBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ButtonGridCheckedForeground}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonRedDirect" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonRed}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.DirectCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource RedButtonBrush}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonRedPainted" TargetType="RadioButton"
           BasedOn="{StaticResource ToggleButtonRed}">
            <Style.Triggers>

                <!-- Trigger on None Selected state -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="true"  Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="false" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"/>
                        <Condition Value="true"  Binding="{Binding Path=InspectionInfo.PaintedCondition, 
                          UpdateSourceTrigger=PropertyChanged,
                          Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                          ConverterParameter=None, Mode=OneWay}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource ButtonGridEnabledBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource RedButtonBrush}" />
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="FacilityBlockButtonStyle" TargetType="Button" 
           BasedOn="{StaticResource ImageClickBlockButtonStyle}">
            <Setter Property="Height" Value="95" />
            <Setter Property="Width" Value="160" />
            <Setter Property="Margin" Value="5,5,5,0" />
        </Style>

        <Style x:Key="PhotosBlockButtonStyle" TargetType="Button" 
           BasedOn="{StaticResource ImageClickBlockButtonStyle}">
            <Setter Property="Width" Value="160" />
        </Style>
        
    </UserControl.Resources>

    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                VerticalScrollBarVisibility="Auto">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="35"   /> <!--  0 - Component -->
                <RowDefinition Height="35"   /> <!--  1 - Equip/Mat -->
                <RowDefinition Height="35"   /> <!--  2 - Component Type -->
                <RowDefinition Height="35"   /> <!--  3 - Section Quantity -->
                <RowDefinition Height="35"  />  <!--  4 - Inspection Date -->
                <RowDefinition Height="170"  /> <!--  5 - Painted & Direct -->
                <RowDefinition Height="35"   /> <!--  6 - Note -->
                <RowDefinition Height="100"   /> <!-- 7 - Inspection Comment -->
                <RowDefinition Height="100"  /> <!--  8 - Inspection Photos -->
                <RowDefinition Height="60"   /> <!--  9 - Action Buttons -->
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="170" />
                <ColumnDefinition Width="80" />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <ColumnDefinition Width="80"  />
                <!-- Make room for the scroll bar -->
            </Grid.ColumnDefinitions>

            <!-- -->
            <Label
                Grid.Row="0" Grid.Column="0"
                Content="Component:"
                Style="{StaticResource LabelRJ}"/>
            <Label
                Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="4"
                Content="{Binding InspectionInfo.Component}"
                Style="{StaticResource LabelROExtEd}"
                />
            <Label
                Grid.Row="0" Grid.Column="5"
                Content="Section:"
                Style="{StaticResource LabelRJ}"
                />
            <Label
                Grid.Row="0" Grid.Column="6" Grid.ColumnSpan="3"
                Content="{Binding InspectionInfo.Section}"
                Style="{StaticResource LabelROExtEd}"
                />

            <!-- Equip / Mat Category -->
            <Label
                Grid.Row="1" Grid.Column="0"
                Content="Equip./Mat. Category:"
                Style="{StaticResource LabelRJ}"
                />
            <Label
                Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="8"
                Content="{Binding InspectionInfo.Category}"
                Style="{StaticResource LabelROExtEd}"/>

            <!-- Component Type -->
            <Label
                Grid.Row="2" Grid.Column="0"
                Content="Component Type:"
                Style="{StaticResource LabelRJ}"
                />
            <Label
                Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="8"
                Content="{Binding InspectionInfo.ComponentType}"
                Style="{StaticResource LabelROExtEd}"/>

            <!-- Section Quantity -->
            <Label
                Grid.Row="3" Grid.Column="0"
                Content="Section Quantity:"
                Style="{StaticResource LabelRJ}"/>
            <Label
                Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2"
                Content="{Binding InspectionInfo.Quantity}"
                ContentStringFormat="{}{0:#,#.00}"
                Style="{StaticResource LabelROExtEd}"/>
            <Label
                Grid.Row="3" Grid.Column="3"
                Content="MBH"
                Style="{StaticResource LabelLJ}"/>

            <!-- Inspection Date -->
            <Label
                Grid.Row="4" Grid.Column="0"
                Content="Inspection Date:"
                Style="{StaticResource LabelRJ}"/>
            <DatePicker
                Grid.Row="4" Grid.Column="1" Grid.ColumnSpan="2"
                Height="35"
                HorizontalAlignment="Left"
                Margin="5,0"
                Width="150"
                Style="{StaticResource dpBase}"
                Text="{Binding InspectionInfo.InspectionDate, StringFormat=d}" />

            <StackPanel
                Grid.Row="4" Grid.Column="4" Grid.ColumnSpan="6"
                Orientation="Horizontal">
                <StackPanel.Resources>
                    <converters:EnumBooleanConverter x:Key="EnumBooleanConverter" />
                </StackPanel.Resources>

                <Label
                    Content="Inspection Type:"
                    Style="{StaticResource LabelRJ}"/>
                <RadioButton
                    Content="Direct Rating"
                    GroupName="InspectionType"
                    Margin="20 0 0 0"
                    VerticalContentAlignment="Center"
                    Style="{DynamicResource rbBase}"
                    IsChecked="{Binding Path=InspectionInfo.InspectionType, 
                    Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                    ConverterParameter=DirectRating,
                    Mode=TwoWay}" />
                <RadioButton
                    Margin="20 0 0 0"
                    GroupName="InspectionType"
                    Content="Distress Survey"
                    IsEnabled="false"
                    VerticalContentAlignment="Center"
                    Style="{DynamicResource rbBase}"
                    IsChecked="{Binding Path=InspectionInfo.InspectionType, 
                    Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                    ConverterParameter=DistressSurvey,
                    Mode=TwoWay}" />
            </StackPanel>

            <!-- Painted & Direct -->
            <Grid Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="9"
                Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="45" />
                    <RowDefinition Height="45" />
                    <RowDefinition Height="45" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="160" />
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="0.75*"/>
                    <ColumnDefinition Width="0.25*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="0.25*"/>
                    <ColumnDefinition Width="0.25*"/>
                </Grid.ColumnDefinitions>

                <!--Background for some cells-->
                <Border 
                    Grid.Row="0" Grid.RowSpan="4" Grid.Column="5" Grid.ColumnSpan="5"
                    BorderThickness="0"
                    Background="{StaticResource ButtonGridNotEnabledBackground}"
                    >
                  <!--<Border.Background>
                    <MultiBinding Converter="{StaticResource MultiBoolToObjectConverter}" >
                      <Binding Path="IsChecked" ElementName="CheckboxPainted" />
                      <Binding Source="{StaticResource ButtonGridEnabledBackground}"    />
                      <Binding Source="{StaticResource ButtonGridNotEnabledBackground}" />
                    </MultiBinding>
                  </Border.Background>-->
                </Border>

                <!--Row 0-->
                <!--What we want here is a right justified Label. However, the desire is to have
                it detect a click event which a Label is not designed to do. Instead, make a
                button that looks like a label and have its click event sent back to VM.-->
                <Button
                    Grid.Row="0" Grid.Column="0"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="0"
                    Content="Painted/Coated:"
                    FontSize="15"
                    Foreground="Black"
                    FontWeight="Normal"
                    HorizontalAlignment="Right"  HorizontalContentAlignment="Right"
                    Margin="5, -5, 5, -5"
                    Padding="0"
                    Command="{Binding CmdPaintedCoated}"
                    />
                <CheckBox
                    Grid.Row="0" Grid.Column="1"
                    Name="CheckboxPainted"
                    VerticalContentAlignment="Center"
                    Foreground="Transparent"
                    Content="Painting - Coated text"
                    IsChecked="{Binding InspectionInfo.IsPainted}"
                    Style="{StaticResource cbBase}"
                    />
                <Label
                    Grid.Row="0" Grid.Column="6" Grid.ColumnSpan="3"
                    Content="Paint/Coating Condition Rating:"
                    HorizontalContentAlignment="Left"
                    Margin="5, 0, 5, -5"
                    Style="{StaticResource LabelCJ}"
                    />

                <!--Row 1-->
                <TextBox Grid.Row="1" Grid.Column="0" Grid.RowSpan="2"
                         Margin="0"
                         TextWrapping="Wrap"
                         HorizontalContentAlignment="Right"
                         Background="Transparent"
                         BorderThickness="0"
                         Style="{StaticResource TextBoxRO}"
                         Text="Direct Condition Rating:"
                    />

                <!-- Direct Condition Rating, Green -->
                <RadioButton Grid.Row="1" Grid.Column="1" Content="Green+" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonGreenDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=GPlus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="2" Grid.Column="1" Content="Green" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonGreenDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=G, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="1" Content="Green-" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonGreenDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=GMinus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <!-- Direct Condition Rating, Amber -->
                <RadioButton Grid.Row="1" Grid.Column="2" Content="Amber+" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonAmberDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=APlus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="2" Grid.Column="2" Content="Amber" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonAmberDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=A, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="2" Content="Amber-" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonAmberDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=AMinus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <!-- Direct Condition Rating, Red -->
                <RadioButton Grid.Row="1" Grid.Column="3" Content="Red+" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonRedDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=RPlus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="2" Grid.Column="3" Content="Red" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonRedDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=R, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="3" Content="Red-" GroupName="DrCondGroup"
                     Style="{StaticResource ToggleButtonRedDirect}" 
                     IsEnabled="True"
                     IsChecked="{Binding ConverterParameter=RMinus, 
                        Path=InspectionInfo.DirectCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <!-- Painted / Coated Condition Rating, Green -->
                <RadioButton Grid.Row="1" Grid.Column="6" Content="Green+" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonGreenPainted}"
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=GPlus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, FallbackValue=true}" 
                />

                <RadioButton Grid.Row="2" Grid.Column="6" Content="Green" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonGreenPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=G, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="6" Content="Green-" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonGreenPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=GMinus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="1" Grid.Column="7" Content="Amber+" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonAmberPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=APlus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <!-- Painted / Coated Condition Rating, Amber -->
                <RadioButton Grid.Row="2" Grid.Column="7" Content="Amber" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonAmberPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=A, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="7" Content="Amber-" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonAmberPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=AMinus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <!-- Painted / Coated Condition Rating, Red -->
                <RadioButton Grid.Row="1" Grid.Column="8" Content="Red+" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonRedPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=RPlus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="2" Grid.Column="8" Content="Red" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonRedPainted}" 
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=R, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

                <RadioButton Grid.Row="3" Grid.Column="8" Content="Red-" GroupName="PtCondGroup"
                     Style="{StaticResource ToggleButtonRedPainted}"
                     IsEnabled="{Binding ElementName=CheckboxPainted, Path=IsChecked}"
                     IsChecked="{Binding ConverterParameter=RMinus, 
                        Path=InspectionInfo.PaintedCondition, 
                        Converter={StaticResource ResourceKey=EnumBooleanConverter}, 
                        UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                />

            </Grid>

            <!--Content="{Binding InspectionInfo.Note}"-->
            <Label 
                Grid.Row="6" Grid.Column="1" Grid.ColumnSpan="8"
                Background="Orange"
                Margin="0,0,5,0"
                Content="{Binding InspectionInfo.Note}"
                Style="{StaticResource LabelRO}"
                Visibility="{Binding InspectionInfo.VisibilityNote}"   
                />

            <!-- Inspection Comment -->
            <Button 
                Grid.Row="7" Grid.Column="0"
                Style="{DynamicResource FacilityBlockButtonStyle}"
                Command="{Binding CmdCommentDoubleClicked}"  
                CommandParameter="{Binding CommentContainer.SelectedItem}"
                >
                <StackPanel 
                    Margin="0,5,0,0"
                    VerticalAlignment="Top"
                    Style="{StaticResource ImageClickBlockPanelStyle}"
                    >
                    <Image 
                        Height="35"
                        Source="/BDC_V1;component/Resources/EditText_Comments (1).png"
                        Style="{StaticResource ImageClickBlockCommentImageStyle}"/>
                    <Label 
                        Margin="0,0,0,0"
                        Padding="0"
                        Content="Inspection Comment"
                        Style="{StaticResource ImageClickBlockTextStyle}" />
                    <!-- Remember -->
                    <Grid
                        Margin="0,0,0,-0"
                        >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <CheckBox Grid.Column="0"
                            Margin="5,0,0,0"
                            Content="Remember"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            Style="{StaticResource cbBase}"
                            IsChecked="{Binding IsRemembered}" />
                        <Image Grid.Column="1"
                            Margin="5,2,5,2"
                            Height="25"
                            Source="/BDC_V1;component/Resources/Remember (1).png"
                            Width="35" />
                    </Grid>
                </StackPanel>
            </Button>

            <ListBox 
                Grid.Row="7" Grid.Column="1" Grid.RowSpan="1" Grid.ColumnSpan="8"
                Name="CommentListBox"
                Margin="0,5,5,0"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                ItemsSource ="{Binding CommentContainer}"
                SelectedItem="{Binding CommentContainer.SelectedItem, Mode=TwoWay}"
                Style="{StaticResource CommentBoxStyle}"
                >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding CmdCommentDoubleClicked}" 
                                   CommandParameter="{Binding ElementName=CommentListBox, Path=SelectedItem}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock TextWrapping="Wrap"  
                        Text="{Binding Path=.}"
                        Width="{Binding Path=Width,RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                        />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>


            <!-- Photos -->
            <Button 
                Grid.Row="8" Grid.Column="0"
                Style="{StaticResource PhotosBlockButtonStyle}"
                Command="{Binding CmdImageDoubleClicked}"  
                CommandParameter="{Binding ImageContainer.SelectedItem}"
                >
                <StackPanel 
                    Style="{StaticResource ImageClickBlockPanelStyle}">
                    <Image 
                        Source="/BDC_V1;component/Resources/PhotoIcon.png"
                        Height="35"
                        Style="{StaticResource ImageClickBlockImageStyle}"/>
                    <StackPanel 
                        Margin="0,-10,0,0"
                        Orientation="Vertical">
                        <Label 
                            Content="Inspection Photo(s)"
                            Style="{StaticResource ImageClickBlockTextStyle}" />
                        <Label 
                            Content="{Binding ElementName=ImageListBox, Path=Items.Count}"
                            ContentStringFormat="Qty: {0}"
                            Style="{StaticResource ImageClickBlockTextStyle}" />
                    </StackPanel>
                </StackPanel >
            </Button>

            <ListBox 
                Grid.Row="8" Grid.Column="1" Grid.ColumnSpan="8"
                Name="ImageListBox"
                Margin="0,5,5,5"
                ScrollViewer.VerticalScrollBarVisibility="Disabled"
                ScrollViewer.HorizontalScrollBarVisibility="Auto"
                ItemsSource ="{Binding ImageContainer}"
                SelectedItem="{Binding ImageContainer.SelectedItem, Mode=TwoWay}"
                Style="{StaticResource ImageBoxStyle}"
            >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding CmdImageDoubleClicked}"  
                                   CommandParameter="{Binding ElementName=ImageListBox, Path=SelectedItem}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel IsItemsHost="True" 
                        Orientation="Horizontal"
            />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>

                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <WrapPanel>
                            <Image Stretch="UniformToFill" 
                     Source="{Binding Path=.}"
                     Height="{Binding Path=Height,RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
              />
                        </WrapPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>

              <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                  <Setter Property="Padding" Value="0"/>
                </Style>
              </ListBox.ItemContainerStyle>
            </ListBox>


            <!-- Action Buttons -->
            <StackPanel 
                Grid.Row="9"
                Grid.Column="0"
                Grid.ColumnSpan="4"
                Orientation="Horizontal"
                Grid.RowSpan="1">

                <Button 
                    Command="{Binding CmdCancelEdit}"
                    Style="{StaticResource btnImageText}"
                    >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Image
                            Grid.Column="0" 
                            Height="20"
                            Source="/BDC_V1;component/Resources/Cancel_Undo (1).png"
                            />
                        <Label 
                            Grid.Column="1"
                            Content="Cancel Edit" 
                            Style="{StaticResource lblText}" />
                    </Grid>
                </Button>

                <Button 
                    Margin="15,5"
                    Command="{Binding CmdDeleteInspection}"
                    Style="{StaticResource btnImageText}"
                    >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Image
                            Grid.Column="0" 
                            Height="20"
                            Source="/BDC_V1;component/Resources/Delete.png"
                            />
                        <Label 
                            Grid.Column="1"
                            Content="Delete Inspection"
                            Foreground="Red" 
                            Style="{StaticResource lblText}" />
                    </Grid>
                </Button>
            </StackPanel>

        </Grid>
    </ScrollViewer>

</UserControl>
