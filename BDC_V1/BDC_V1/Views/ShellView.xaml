<Window Title="{Binding Title}"
        x:Class="BDC_V1.Views.ShellView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:prism="http://prismlibrary.com/"
        xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        prism:ViewModelLocator.AutoWireViewModel="True"
        xmlns:local="clr-namespace:BDC_V1.Views"
        xmlns:interfaces="clr-namespace:BDC_V1.Interfaces"
        xmlns:converters="clr-namespace:BDC_V1.Converters"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:classes="clr-namespace:BDC_V1.Classes"
        Background="{DynamicResource MaterialDesignPaper}"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        mc:Ignorable="d"
        FontSize="15"
        Visibility="{Binding Path=WindowVisibility, Mode=TwoWay}"
        WindowStartupLocation="CenterScreen"
        Height="900" Width="1440"
        Icon="/BDC_V1;component/Resources/BDC.ico">

    <i:Interaction.Triggers>
      <i:EventTrigger EventName="Loaded">
        <i:InvokeCommandAction Command="{Binding ViewActivated}" />
      </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.Resources>
        <ResourceDictionary>
          <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DialogHost.xaml" />
          </ResourceDictionary.MergedDictionaries>

          <Style x:Key="TransparentBitmap" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedLightButton}">
            <Setter Property="Height" Value="82" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Margin" Value="10" />
          </Style>

          <!--<system:Double x:Key="FacilityFontSize">14</system:Double>-->
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--Menu-->
        <Border Grid.Row="0" BorderThickness="0" Background="LightGray" />
        <Menu Grid.Row="0">
            <MenuItem Header="Tools" >
                <MenuItem Header="_Bluebeam data"         Command="{Binding CmdMenuBluebeam}"/>
                <MenuItem Header="_Calculators"           Command="{Binding CmdMenuCalculators}"/>
                <MenuItem Header="_Switch file/inspector" Command="{Binding CmdMenuSwitchFile}"/>
                <MenuItem Header="View _All Systems"      Command="{Binding CmdMenuViewAllSystems}"      IsCheckable="True" IsChecked="{Binding ViewAllSystems}"     />
                <MenuItem Header="_View Assigned Systems" Command="{Binding CmdMenuViewAssignedSystems}" IsCheckable="True" IsChecked="{Binding ViewAssignedSystems}"/>
            </MenuItem>

            <MenuItem Header="Reports" >
                <MenuItem Header="_InspectionComment Summary" Command="{Binding CmdMenuInspectionSummary}"/>
                <MenuItem Header="_QC Reports" Command="{Binding CmdMenuQcReports}"/>
            </MenuItem>

            <MenuItem Header="Help">
                <MenuItem Header="About..." Command="{Binding CmdMenuAbout}" />
            </MenuItem>

            <MenuItem Header="Exit" Command="{Binding CmdMenuExit}" />
        </Menu>
        
        <!--Toolbar-->
        <Grid
            Grid.Row="1"
            >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <Border 
                Grid.ColumnSpan="14" 
                Background="LightGray" />

            <!--Default/Inventory mode button-->
            <Button Grid.Column="0"
                    ToolTip="Inventory Mode"
                    Background="{Binding InventoryBg}"
                    Command="{Binding CmdDefaultInventoryMode}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Height="72" Width="72" Source="/BDC_V1;component/Resources/Inventory (1).png"/>
            </Button>

            <!--Inspection mode button-->
            <Button Grid.Column="1"
                    ToolTip="Inspection Mode"
                    Background="{Binding InspectionBg}"
                    Command="{Binding CmdInspectionMode}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Height="72" Width="72" Source="/BDC_V1;component/Resources/Inspection_75.png"/>
            </Button>
            
            <!--Add System-->
            <!--Visible when ComponentFacility active-->
            <Button Grid.Column="2"
                    ToolTip="Add System"
                    Command="{Binding CmdAddSystem}"
                    Visibility="{Binding VisibilityAddSystemButton}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Width="132" Height="72" Source="/BDC_V1;component/Resources/AddSystem_75.png"/>
            </Button>

            <!--Delete System-->
            <!--Visible when ComponentFacility active-->
            <Button Grid.Column="3"
                    ToolTip="Delete System"
                    Command="{Binding CmdDeleteSystem}"
                    Visibility="{Binding VisibilityDeleteSystemButton}"
                    Style="{DynamicResource TransparentBitmap}">
              <Image Width="132" Height="72" Source="/BDC_V1;component/Resources/DeleteSystem_75.png"/>
            </Button>

            <!--Add Component-->
            <!--Visible when Inventory active-->
            <Button Grid.Column="4"
                    ToolTip="Add ComponentInventory"
                    Command="{Binding CmdAddComponent}"
                    Visibility="{Binding VisibilityAddComponentButton}"
                    Style="{DynamicResource TransparentBitmap}">
              <Image Width="132" Height="72" Source="/BDC_V1;component/Resources/AddComponent_75.png"/>
            </Button>

            <!--Add Section-->
            <!--Visible when Inventory active-->
            <Button Grid.Column="5"
                    ToolTip="Add Section"
                    Command="{Binding CmdAddSection}"
                    Visibility="{Binding VisibilityAddSectionButton}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Width="132" Height="72" Source="/BDC_V1;component/Resources/AddSection_75.png"/>
            </Button>

            <!--Copy Sections-->
            <!--Visible when Inventory active-->
            <Button Grid.Column="6"
                    ToolTip="Copy Sections"
                    Command="{Binding CmdCopySections}"
                    Visibility="{Binding VisibilityCopySectionsButton}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Width="72" Height="72" Source="/BDC_V1;component/Resources/CopySection_75.png"/>
            </Button>

            <!--Copy Inventory-->
            <!--Visible when Inventory active-->
            <Button Grid.Column="7"
                    ToolTip="Copy Inventory"
                    Command="{Binding CmdCopyInventory}"
                    Visibility="{Binding VisibilityCopyInventoryButton}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Width="72" Height="72" Source="/BDC_V1;component/Resources/CopyInventory_75_C.png"/>
            </Button>

            <!--Copy Inspection-->
            <!--Visible when Inspection active-->
            <Button Grid.Column="8"
                    ToolTip="Copy Inspection"
                    Command="{Binding CmdCopyInspection}"
                    Visibility="{Binding VisibilityCopyInspectionButton}"
                    Style="{DynamicResource TransparentBitmap}">
                <Image Width="72" Height="72" Source="/BDC_V1;component/Resources/CopyInspection_75_C.png"/>
            </Button>

            <!--Microphone On button-->
            <Button 
                Grid.Column="10"
                ToolTip="Microphone ON"
                Background="{Binding MikeOnBg}"
                BorderBrush="{Binding MikeOnBorderBrush}"
                BorderThickness="2"
                Command="{Binding CmdMicOn}"
                Style="{DynamicResource TransparentBitmap}">
                <Image Width="72" Height="72" Source="/BDC_V1;component/Resources/MicrophoneON_75.png"/>
            </Button>

            <!--Microphone Off button-->
            <Button 
                Grid.Column="11"
                ToolTip="Microphone OFF"
                Background="{Binding MikeOffBg}"
                BorderBrush="{Binding MikeOffBorderBrush}"
                BorderThickness="2"
                Command="{Binding CmdMicOff}"
                Style="{DynamicResource TransparentBitmap}">
                <Image Width="72" Height="72" Source="/BDC_V1;component/Resources/MicrophoneOFF_75.png"/>
            </Button>
        </Grid>
        
        <!--Primary working area-->
        <!--A column for a tree, a splitter column and a column for a Tab Control.-->
        <Grid Grid.Row="2">
          <Grid.Resources>
           <!-- 
            Notes
            * Cannot place this in the TreeView, Causes a exception
              "Add value to collection of type 'System.Windows.Controls.ItemCollection' threw an exception"
            
            * HierarchicalDataTemplate doesn't work with collections of interfaces
            -->

            <!-- recurse the tree in the proper manner -->
            <!-- Sets the style for the all the child items -->
            <HierarchicalDataTemplate DataType="{x:Type classes:ComponentBase}" 
                                      ItemsSource="{Binding Path=Children}">
              <Label Content="{Binding Path=ComponentName}" />

              <HierarchicalDataTemplate.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                  <!--By default, a tree displays its items condensed. We want all items in the tree to be expanded.-->
                  <Setter Property="IsExpanded" Value="True"/>

                  <!-- Set the default font style for non-facility nodes --> 
                  <Setter Property="FontWeight" Value="Normal" />
                  <Setter Property="Background" Value="White"  />
                  <Setter Property="Foreground" Value="Black"  />
                  <Setter Property="FontSize"   Value="12"     />

                  <!-- 
                  Show or hide this node based on the "IsVisible" flag of each component 
                  NOTE: A hidden node will also conceal all of it's children
                  -->
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsActive}" Value="False">
                      <Setter Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </HierarchicalDataTemplate.ItemContainerStyle>
            </HierarchicalDataTemplate>
          </Grid.Resources>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>

            <!--Inventory tree, the selected Tree item.-->
            <TreeView Grid.Column="0" 
                      ItemsSource="{Binding TreeItemsViewSource}"
                      VirtualizingStackPanel.IsVirtualizing="True"
                      VirtualizingStackPanel.VirtualizationMode="Recycling" 
                      >
              <!-- Sets the style for the top-level (Facility) items only -->
              <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                  <!--By default, a tree displays its items condensed. We want all items in the tree to be expanded.-->
                  <Setter Property="IsExpanded" Value="True"/>

                  <!-- Set the font weight based on the node type -->
                  <Setter Property="FontWeight" Value="Bold" />
                  <Setter Property="Background" Value="LightGreen" />
                  <Setter Property="Foreground" Value="Black" />
                  <Setter Property="FontSize"   Value="14" />

                  <!-- Set the font color based on the existence of issues -->
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding HasAnyQaIssues}" Value="True">
                      <Setter Property="Foreground" Value="White"/>   <!-- TODO: Setting foreground here Doesn't work !!! -->
                      <Setter Property="Background" Value="Red"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TreeView.ItemContainerStyle>
            </TreeView>

            <!--Put a splitter between the inventory tree and the TabControl where most activities take place.-->
            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" />

            <!--This TabControl contains a collection of items, each of which preforms a task related to the currently selected Tree item.-->
            <TabControl Grid.Column="2" Name="ViewTabControl"
                        SelectedIndex="{Binding Path=ViewTabIndex, Mode=TwoWay}"
                        SelectedItem="{Binding Path=ViewTabItem, Mode=OneWayToSource}">
                <!-- A Prism compatible way to reflect events into the ViewModel -->
                <i:Interaction.Triggers> 
                    <i:EventTrigger EventName="SelectionChanged"> 
                        <i:InvokeCommandAction 
                            Command="{Binding CmdTabSelectionChanged}"
                            CommandParameter="{Binding ElementName=ViewTabControl, Path=SelectedItem}"/>  
                    </i:EventTrigger> 
                </i:Interaction.Triggers> 

                <!--  these colors should be done with a selection style -->
                <TabItem 
                    Name="Facility" 
                    Header="FACILITY" 
                    Background="{Binding FacilityTabBackgroundColor}"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Top">
                    <local:FacilityView />
                </TabItem>

                <TabItem 
                    Name="Inventory" 
                    Header="INVENTORY"  
                    Background="{Binding InventoryTabBackgroundColor}"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Top">
                    <local:InventoryView />
                </TabItem>

                <TabItem 
                    Name="Inspection" 
                    Header="INSPECTION"  
                    Background="{Binding InspectionTabBackgroundColor}"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Top">
                    <local:InspectionView />
                </TabItem>

                <TabItem 
                    Name="QaInventory" 
                    Header="QC - INVENTORY"  
                    Background="{Binding QaInventoryTabBackgroundColor}"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Top">
                  <local:QaInventoryView />
                </TabItem>

                <TabItem 
                    Name="QaInspection" 
                    Header="QC - INSPECTION"  
                    Background="{Binding QaInspectionTabBackgroundColor}"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Top">
                    <local:QaInspectionView />
                </TabItem>
                
            </TabControl>
        </Grid>
        
        <!--Bottom status bar-->
        <Border Grid.Row="3" BorderThickness="0" Background="Gray" />
        <StatusBar Grid.Row="3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <StackPanel
                    Grid.Row="0"
                    Orientation="Horizontal">
                    <Label Style="{StaticResource LabelRO}" Content="{Binding StatusLookup        }" />
                    <Label Style="{StaticResource LabelRO}" Content="{Binding StatusInspector     }" />
                    <Label Style="{StaticResource LabelRO}" Content="{Binding StatusInspectedBy   }" />
                    <Label Style="{StaticResource LabelRO}" Content="{Binding StatusDateTimeString}" />
                </StackPanel>
                <Label 
                    Grid.Row="1"
                    Style="{StaticResource LabelRO}" Content="{Binding BredFilename}" />
            </Grid>
        </StatusBar>

    </Grid>
</Window>
